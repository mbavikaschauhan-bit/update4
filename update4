<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stoclix - Trading Journal</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            /* Light Theme (Default) */
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --bg-tertiary: #e9ecef;
            --text-primary: #212529;
            --text-secondary: #2c333a;
            --text-muted: #3e444a;
            --border-color: #dee2e6;
            --shadow: rgba(0, 0, 0, 0.1);
            --accent-color: #007bff;
        }

        [data-theme="dark"] {
            --bg-primary: #0d1b2a;
            --bg-secondary: #1b263b;
            --bg-tertiary: #404040;
            --text-primary: #ffffff; /* Brighter */
            --text-secondary: #d1d5db; /* Brighter */
            --text-muted: #9ca3af; /* Brighter */
            --border-color: #555555;
            --shadow: rgba(0, 0, 0, 0.3);
            --accent-color: #00d4aa;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            transition: background-color 0.3s ease, color 0.3s ease;
            background-color: var(--bg-secondary);
            color: var(--text-primary);
        }

        .btn-primary {
            background-color: #3b82f6;
            /* blue-500 */
            color: white;
        }
        
        .btn-primary:hover {
            opacity: 0.9;
        }

        .nav-item {
            transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
        }

        .nav-item.active {
            background-color: #3b82f6;
            /* blue-500 */
            color: white;
            border-radius: 0.5rem;
        }

        .nav-item:not(.active):hover {
            background-color: var(--bg-tertiary);
            color: var(--text-primary);
        }
        
        .nav-item.active svg, .nav-item.active i {
             stroke: white;
             color: white; /* Added for the Rupee icon */
        }
        
        /* For Webkit browsers */
        ::-webkit-scrollbar {
            width: 12px;
            height: 12px;
        }

        ::-webkit-scrollbar-track {
            background: transparent;
        }

        ::-webkit-scrollbar-thumb {
            background-color: #94a3b8;
            border-radius: 20px;
            border: 3px solid transparent;
            background-clip: content-box;
        }
        
        [data-theme="dark"] ::-webkit-scrollbar-thumb {
            background-color: #475569;
        }

        .page {
            display: none;
        }

        .page.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0;
 transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0);
 }
        }
        
        @keyframes spin {
            to { transform: rotate(360deg);
 }
        }

        .spinner {
            display: inline-block;
            width: 1rem;
            height: 1rem;
            vertical-align: text-bottom;
            border: 0.15em solid currentColor;
            border-right-color: transparent;
            border-radius: 50%;
            animation: spin .75s linear infinite;
        }

        .page.active {
            animation: fadeIn 0.5s ease-in-out;
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 50;
        }
        
        .calendar-day {
            min-height: 100px;
        }
        
        #toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .toast {
            min-width: 250px;
            padding: 1rem 1.5rem;
            border-radius: 0.5rem;
            color: white;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55);
            display: flex;
            align-items: center;
            gap: 10px;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        }

        .toast.show {
            opacity: 1;
            transform: translateX(0);
        }

        .toast-success { background-color: #22c55e;
 }
        .toast-error { background-color: #ef4444;
 }
        .toast-info { background-color: #3b82f6;
 }
        
        /* --- Colorful Icons --- */
        .nav-item:not(.active) .feather-home { stroke: #3b82f6; /* blue-500 */ }
        .nav-item:not(.active) .feather-plus-circle { stroke: #22c55e; /* green-500 */ }
        .nav-item:not(.active) .feather-calendar { stroke: #8b5cf6; /* violet-500 */ }
        .nav-item:not(.active) .feather-list { stroke: #6366f1; /* indigo-500 */ }
        .nav-item:not(.active) .feather-bar-chart-2 { stroke: #f97316; /* orange-500 */ }
        .nav-item:not(.active) .feather-file-text { stroke: #0ea5e9; /* sky-500 */ }
        .nav-item:not(.active) .feather-user { stroke: #64748b; /* slate-500 */ }
        .nav-item:not(.active) .feather-award { stroke: #f59e0b; /* amber-500 */ }
        
        /* Special case for the Rupee symbol which is not a feather icon */
        .nav-item[data-page="fund-management"]:not(.active) i { color: #10b981; /* emerald-500 */ }

        /* Light background for weekday headers (Sun–Sat) */
        .weekday-header {
          background-color: #f5f5f5 !important;
          border: 2px solid #ccc !important; /* stronger outline */
          color: #333;
          border-radius: 6px;
        }

        /* Light background + visible outline for date boxes */
        .date-box {
          background-color: #fafafa !important;
          border: 2px solid #bbb !important; /* more visible border */
          border-radius: 6px;
          position: relative; /* For popup positioning */
          transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }

        .date-box:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 16px var(--shadow);
            z-index: 10;
        }
        
        .date-box.has-trades {
            cursor: pointer;
        }

        /* Light background + visible outline for weekly summary boxes */
        .week-summary {
          background-color: #f5f5f5 !important;
          border: 2px solid #999 !important; /* darker border for emphasis */
          border-radius: 10px;
          padding: 6px;
        }

        /* Brighter Calendar Text */
        .weekday-header {
            font-weight: 600;
        }
        .date-box .date-number {
            font-weight: 600;
            font-size: 0.875rem; /* 14px */
            color: var(--text-primary);
        }
        .week-summary .week-label {
            font-weight: 600;
            font-size: 0.875rem; /* 14px */
            color: var(--text-secondary);
        }

        /* Dark Theme Overrides for Calendar Visibility */
        [data-theme="dark"] .weekday-header {
            background-color: #2a3a4b !important;
            border-color: #4a5a6b !important;
            color: #e5e7eb; /* Brighter text for dark mode */
        }
        [data-theme="dark"] .date-box {
            background-color: #1b263b !important;
            border-color: #444 !important;
        }
        [data-theme="dark"] .week-summary {
            background-color: #2a3a4b !important;
            border-color: #6b7280 !important;
        }
        [data-theme="dark"] .date-box .date-number,
        [data-theme="dark"] .week-summary .week-label {
             color: #f9fafb;
        }

        /* Profit/Loss text inside date boxes */
        .date-box .pl-amount {
            display: block;
            font-size: 12px;
            font-weight: bold;
            margin-top: 4px;
        }

        /* Green for profit */
        .date-box .pl-amount.profit {
            color: #2e7d32;
        }

        /* Red for loss */
        .date-box .pl-amount.loss {
            color: #c62828;
        }
        
        /* Large modal popup */
        .trade-details-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 700px;
            border-radius: 12px;
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            color: #e5e7eb; /* Default text color for dark modal */
            background-color: #1e293b; /* Dark background from image */
        }
        
        [data-theme="light"] .trade-details-modal {
             background-color: var(--bg-primary);
             color: var(--text-primary);
        }
        
        .trade-details-modal .modal-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #334155;
        }
        
        [data-theme="light"] .trade-details-modal .modal-header {
            border-bottom-color: var(--border-color);
        }

        .trade-details-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
            line-height: 1;
            padding: 4px;
            color: #94a3b8;
        }

        .trade-details-modal .modal-content {
            padding: 1.5rem;
        }
        
        .modal-stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .stat-card {
            background-color: #334155; /* Card background from image */
            padding: 1rem;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        [data-theme="light"] .stat-card {
            background-color: var(--bg-secondary);
        }

        .stat-card-label {
            font-size: 0.875rem;
            color: #94a3b8; /* Muted text color from image */
        }
        [data-theme="light"] .stat-card-label { color: var(--text-muted); }

        .stat-card-value {
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .stat-card-icon {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .trades-table {
            width: 100%;
            border-collapse: collapse;
        }
        .trades-table th, .trades-table td {
            padding: 0.75rem 1rem;
            text-align: left;
            font-size: 0.875rem;
        }
        .trades-table thead {
             border-bottom: 1px solid #334155;
        }
        [data-theme="light"] .trades-table thead { border-bottom-color: var(--border-color); }
        
        .trades-table th {
            color: #94a3b8;
            font-weight: 500;
            text-transform: uppercase;
        }
        [data-theme="light"] .trades-table th { color: var(--text-muted); }

        .trades-table tbody tr:not(:last-child) {
            border-bottom: 1px solid #334155;
        }
        [data-theme="light"] .trades-table tbody tr:not(:last-child) { border-bottom-color: var(--border-color); }

        /* New Add Trade Form Styles */
        .form-btn-group button {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            border: 1px solid var(--border-color);
            background-color: var(--bg-primary);
            color: var(--text-secondary);
            transition: all 0.2s ease-in-out;
        }
        .form-btn-group button.active {
            background-color: var(--accent-color);
            color: white;
            border-color: var(--accent-color);
        }
         [data-theme="dark"] .form-btn-group button.active {
             color: #0d1b2a;
         }


    </style>
</head>
<body class="antialiased">

    <div id="toast-container"></div>

    <!-- Main App Wrapper -->
    <div id="app-container" class="hidden relative h-screen md:flex">
        <!-- Sidebar -->
        <aside id="sidebar" class="w-64 flex-shrink-0 flex-col fixed inset-y-0 left-0 z-40 transform -translate-x-full md:relative md:translate-x-0 transition-transform duration-200 ease-in-out flex" style="background-color: var(--bg-primary); border-right: 1px solid var(--border-color);">
            <div class="h-16 flex items-center justify-center px-4" style="border-bottom: 1px solid var(--border-color);">
                <h1 class="text-3xl font-bold">
                    <span style="color: #22c55e;">Stoc</span><span style="color: #ef4444;">lix</span>
                </h1>
            </div>
            <nav class="flex-1 px-4 py-4 space-y-2">
                <a href="#" data-page="dashboard" class="nav-item flex items-center px-4 py-2 rounded-md active" style="color: var(--text-secondary);">
                    <i data-feather="home" class="mr-3 h-5 w-5"></i> <span>Dashboard</span>
                </a>
                <a href="#" data-page="add-trade" class="nav-item flex items-center px-4 py-2 rounded-md" style="color: var(--text-secondary);">
                    <i data-feather="plus-circle" class="mr-3 h-5 w-5"></i> <span>Add Trade</span>
                </a>
                <a href="#" data-page="trade-calendar" class="nav-item flex items-center px-4 py-2 rounded-md" style="color: var(--text-secondary);">
                    <i data-feather="calendar" class="mr-3 h-5 w-5"></i> <span>Trading Calendar</span>
                </a>
                <a href="#" data-page="trade-history" class="nav-item flex items-center px-4 py-2 rounded-md" style="color: var(--text-secondary);">
                    <i data-feather="list" class="mr-3 h-5 w-5"></i> <span>Trade History</span>
                </a>
                <a href="#" data-page="fund-management" class="nav-item flex items-center px-4 py-2 rounded-md" style="color: var(--text-secondary);">
                    <i class="mr-3 h-5 w-5 flex items-center justify-center font-bold text-lg not-italic">₹</i>
                    <span>Fund Management</span>
                </a>
                <a href="#" data-page="reports" class="nav-item flex items-center px-4 py-2 rounded-md" style="color: var(--text-secondary);">
                    <i data-feather="bar-chart-2" class="mr-3 h-5 w-5"></i> <span>Reports</span>
                </a>
                <a href="#" data-page="trade-statement" class="nav-item flex items-center px-4 py-2 rounded-md" style="color: var(--text-secondary);">
                    <i data-feather="file-text" class="mr-3 h-5 w-5"></i> <span>Trade Statement</span>
                </a>
                <a href="#" data-page="challenge" class="nav-item flex items-center px-4 py-2 rounded-md" style="color: var(--text-secondary);">
                    <i data-feather="award" class="mr-3 h-5 w-5"></i> <span>Challenge</span>
                </a>
                <a href="#" data-page="profile" class="nav-item flex items-center px-4 py-2 rounded-md" style="color: var(--text-secondary);">
                    <i data-feather="user" class="mr-3 h-5 w-5"></i> <span>User Profile</span>
                </a>
            </nav>
        </aside>

        <!-- Main Content -->
        <div class="flex flex-col flex-1 w-full overflow-hidden">
            <header class="sticky top-0 backdrop-blur-lg z-30 h-16 flex items-center justify-between px-4 md:px-8" style="background-color: var(--bg-primary); border-bottom: 1px solid var(--border-color);">
                <div class="flex items-center space-x-4">
                    <button id="menu-toggle-btn" class="md:hidden p-2 rounded-full" style="background-color: var(--bg-secondary); color: var(--text-primary);">
                        <i data-feather="menu" class="h-6 w-6"></i>
                    </button>
                    <h2 id="page-title" class="text-xl font-semibold" style="color: var(--text-primary);">Dashboard</h2>
                </div>
                <div class="flex items-center space-x-2 md:space-x-4">
                    <p id="user-display-name" class="hidden md:block text-sm font-medium" style="color: var(--text-secondary);"></p>
                    <!-- New Theme Toggle Start -->
                    <div class="flex items-center justify-center space-x-2">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-yellow-500"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>
                        <label for="theme-toggle-input" class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" value="" id="theme-toggle-input" class="sr-only peer">
                            <div class="w-11 h-6 bg-slate-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                        </label>
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-slate-400"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>
                    </div>
                    <!-- New Theme Toggle End -->
                     <button class="logout-btn p-2 rounded-full" style="background-color: var(--bg-secondary); color: var(--text-primary);" title="Logout">
                         <i data-feather="log-out" class="h-5 w-5"></i>
                    </button>
                </div>
            </header>
            
            <main id="main-content" class="flex-1 overflow-y-auto">
                <div class="p-4 md:p-8">
                    <!-- Dashboard Page -->
                    <div id="dashboard" class="page active">
                        
                        <!-- Performance Stats -->
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                            <div class="p-5 rounded-lg shadow-sm text-center" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                <h3 class="text-sm font-medium" style="color: var(--text-secondary);">Net P&L</h3>
                                <p id="db-net-pnl" class="text-2xl font-bold mt-2" style="color: var(--text-primary);">₹0.00</p>
                                <p id="db-total-trades" class="text-xs" style="color: var(--text-muted);">0 trades</p>
                            </div>
                            <div class="p-5 rounded-lg shadow-sm text-center" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                <h3 class="text-sm font-medium" style="color: var(--text-secondary);">Win Rate</h3>
                                <p id="db-win-rate" class="text-2xl font-bold mt-2" style="color: var(--text-primary);">0%</p>
                                <div class="flex items-center justify-center text-xs" style="color: var(--text-muted);">
                                    <span id="db-won-trades" class="text-green-500 mr-2">0 won</span>
                                    <span id="db-lost-trades" class="text-red-500">0 lost</span>
                                </div>
                            </div>
                            <div class="p-5 rounded-lg shadow-sm text-center" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                <h3 class="text-sm font-medium" style="color: var(--text-secondary);">Profit Factor</h3>
                                <p id="db-profit-factor" class="text-2xl font-bold mt-2" style="color: var(--text-primary);">0.00</p>
                                <p class="text-xs" style="color: var(--text-muted);">Gross P&L split</p>
                            </div>
                            <div class="p-5 rounded-lg shadow-sm text-center" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                <h3 class="text-sm font-medium" style="color: var(--text-secondary);">Avg win/loss trade</h3>
                                <p id="db-avg-win-loss" class="text-2xl font-bold mt-2" style="color: var(--text-primary);">0.00</p>
                                <div class="flex items-center justify-center text-xs" style="color: var(--text-muted);">
                                    <span id="db-avg-win" class="text-green-500 mr-2">+₹0.00</span>
                                    <span id="db-avg-loss" class="text-red-500">-₹0.00</span>
                                </div>
                            </div>
                        </div>

                        <!-- Account Summary -->
                        <div class="rounded-lg shadow-sm p-6 mb-8" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                            <h3 class="text-xl font-bold mb-4" style="color: var(--text-primary);">Account Summary</h3>
                            <div id="db-account-summary" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                                <div><p class="text-sm" style="color: var(--text-secondary);">NET ACCOUNT VALUE</p><p class="text-2xl font-bold" style="color: var(--text-primary);">₹0.00</p></div>
                                <div><p class="text-sm" style="color: var(--text-secondary);">NET REALIZED P&L</p><p class="text-2xl font-bold" style="color: var(--text-primary);">₹0.00</p></div>
                                <div><p class="text-sm" style="color: var(--text-secondary);">AVAILABLE CASH</p><p class="text-2xl font-bold" style="color: var(--text-primary);">₹0.00</p></div>
                                <div><p class="text-sm" style="color: var(--text-secondary);">DEPLOYED CAPITAL</p><p class="text-2xl font-bold" style="color: var(--text-primary);">₹0.00</p></div>
                                <div><p class="text-sm" style="color: var(--text-secondary);">TOTAL DEPOSITS</p><p class="text-2xl font-bold" style="color: var(--text-primary);">₹0.00</p></div>
                                <div><p class="text-sm" style="color: var(--text-secondary);">TOTAL WITHDRAWN</p><p class="text-2xl font-bold" style="color: var(--text-primary);">₹0.00</p></div>
                                <div><p class="text-sm" style="color: var(--text-secondary);">STARTING BALANCE</p><p class="text-2xl font-bold" style="color: var(--text-primary);">₹0.00</p></div>
                            </div>
                            <p class="text-xs" style="color: var(--text-muted);">Returns are shown once deposits are made.</p>
                        </div>
                        
                        <!-- Achievements Section -->
                        <div class="rounded-lg shadow-sm p-6 mb-8" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                            <h3 class="text-xl font-bold mb-4" style="color: var(--text-primary);">🏆 Achievements</h3>
                            <div class="achievements-container grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-4 text-center">
                                <!-- Badges will be injected here -->
                            </div>
                        </div>

                        <!-- Top Trades Section -->
                        <div class="rounded-lg shadow-sm p-6 mb-8" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                            <div class="flex justify-between items-center mb-4">
                               <h3 class="text-xl font-bold" style="color: var(--text-primary);">Top Trades</h3>
                               <a href="#" data-page="trade-history" class="nav-item text-sm font-medium text-blue-600 hover:underline">View All</a>
                            </div>
                            <div id="top-trades-widget">
                                <!-- Top trades will be rendered here -->
                            </div>
                        </div>

                        <!-- Charts -->
                        <div class="space-y-8">
                            <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                <h3 class="font-semibold" style="color: var(--text-primary);">Account Balance</h3>
                                <p class="text-sm" style="color: var(--text-secondary);">Capital Deployed and Account Value over time</p>
                                <canvas id="accountBalanceChart"></canvas>
                            </div>
                             <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                <h3 class="font-semibold" style="color: var(--text-primary);">Monthly Performance</h3>
                                <p class="text-sm" style="color: var(--text-secondary);">Your P&L broken down by month</p>
                                <canvas id="monthlyPerformanceChart"></canvas>
                            </div>
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                                <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                    <h3 class="font-semibold mb-4" style="color: var(--text-primary);">Equity Curve</h3>
                                    <canvas id="equityCurveChart"></canvas>
                                </div>
                                <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                    <h3 class="font-semibold mb-4" style="color: var(--text-primary);">P&L by Segment</h3>
                                    <canvas id="pnlBySegmentChart"></canvas>
                                </div>
                            </div>
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                                <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                    <h3 class="font-semibold mb-4" style="color: var(--text-primary);">Win/Loss Distribution</h3>
                                    <div class="h-64 flex items-center justify-center relative">
                                        <canvas id="winLossDistributionChart"></canvas>
                                        <p id="winLossMessage" class="hidden absolute text-center" style="color: var(--text-muted);">No trades yet</p>
                                    </div>
                                </div>
                                <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                    <h3 class="font-semibold mb-4" style="color: var(--text-primary);">Performance by Day of Week</h3>
                                    <canvas id="performanceByDayChart"></canvas>
                                </div>
                            </div>
                            <!-- Daily P&L Chart -->
                            <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                <h3 class="font-semibold mb-4" style="color: var(--text-primary);">Daily P&L</h3>
                                <div class="relative h-64">
                                     <canvas id="dailyPnlChart"></canvas>
                                     <p id="dailyPnlMessage" class="hidden absolute inset-0 flex items-center justify-center" style="color: var(--text-muted);">No P&L data yet</p>
                                </div>
                            </div>
                            <!-- ADDED: New Chart for Daily Win Rate -->
                            <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                <h3 class="font-semibold mb-4" style="color: var(--text-primary);">Daily Win Rate vs Average Win Rate</h3>
                                <canvas id="dailyWinRateChart"></canvas>
                            </div>

                             <!-- Strategy vs P&L Chart -->
                            <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                <h3 class="font-semibold mb-4" style="color: var(--text-primary);">Strategy vs P&L</h3>
                                <canvas id="strategyPnlChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Add Trade Page -->
                    <div id="add-trade" class="page">
                        <form id="manual-trade-form" class="space-y-8 max-w-6xl mx-auto">
                            <input type="hidden" id="trade-id" name="tradeId">
                            
                            <div>
                                <h2 id="trade-form-title" class="text-3xl font-bold" style="color: var(--text-primary);">Add New Trade</h2>
                                <p class="text-md mt-1" style="color: var(--text-secondary);">Log your trades with precision to refine your strategy.</p>
                            </div>

                            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                                <!-- Left Column -->
                                <div class="lg:col-span-1 space-y-8">
                                     <!-- Trade Details -->
                                    <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                        <h3 class="text-xl font-semibold mb-6 border-b pb-4" style="color: var(--text-primary); border-color: var(--border-color);">Trade Details</h3>
                                        <div class="space-y-6">
                                            <div class="relative">
                                                <label for="asset-input" class="block text-sm font-medium" style="color: var(--text-secondary);">Symbol</label>
                                                <input name="asset" type="text" id="asset-input" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="e.g. RELIANCE, NIFTY 50" required>
                                                <div id="asset-suggestions" class="absolute z-10 w-full rounded-md mt-1 hidden max-h-48 overflow-y-auto" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"></div>
                                            </div>
                                            <div>
                                                <label class="block text-sm font-medium mb-2" style="color: var(--text-secondary);">Direction</label>
                                                <div id="direction-group" class="form-btn-group grid grid-cols-2 gap-2">
                                                    <button type="button" data-value="Long" class="active flex items-center justify-center gap-2"><i data-feather="arrow-up" class="inline-block h-4 w-4"></i>Long</button>
                                                    <button type="button" data-value="Short" class="flex items-center justify-center gap-2"><i data-feather="arrow-down" class="inline-block h-4 w-4"></i>Short</button>
                                                </div>
                                            </div>
                                            <div>
                                                <label class="block text-sm font-medium mb-2" style="color: var(--text-secondary);">Segment</label>
                                                <div id="segment-group" class="form-btn-group grid grid-cols-2 gap-2">
                                                    <button type="button" data-value="Equity">Equity</button>
                                                    <button type="button" data-value="F&O">F&O</button>
                                                    <button type="button" data-value="Commodity" class="flex items-center justify-center">Commodity</button>
                                                    <button type="button" data-value="Currency" class="active">Currency</button>
                                                </div>
                                            </div>
                                            <div>
                                                <label class="block text-sm font-medium mb-2" style="color: var(--text-secondary);">Trading Style</label>
                                                <div id="trading-style-group" class="form-btn-group grid grid-cols-2 gap-2">
                                                    <button type="button" data-value="Scalping">Scalping</button>
                                                    <button type="button" data-value="Intraday">Intraday</button>
                                                    <button type="button" data-value="Swing">Swing</button>
                                                    <button type="button" data-value="Position">Position</button>
                                                    <button type="button" data-value="Long-Term" class="active col-span-2">Long-Term</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                     <!-- Risk & Strategy -->
                                    <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                         <h3 class="text-xl font-semibold mb-6 border-b pb-4" style="color: var(--text-primary); border-color: var(--border-color);">Risk & Strategy</h3>
                                         <div class="space-y-6">
                                            <div><label for="stop-loss" class="block text-sm font-medium" style="color: var(--text-secondary);">Stop Loss</label><input name="stopLoss" type="number" step="any" id="stop-loss" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="0.00"></div>
                                            <div><label for="target" class="block text-sm font-medium" style="color: var(--text-secondary);">Target Price</label><input name="target" type="number" step="any" id="target" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="0.00"></div>
                                            <div><label for="strategy" class="block text-sm font-medium" style="color: var(--text-secondary);">Strategy Tag</label><select name="strategy" id="strategy" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);"><option>Price Action</option><option>Trend Following</option><option>Nifty Breakout</option><option>Other</option></select></div>
                                            <div><label for="outcome-summary" class="block text-sm font-medium" style="color: var(--text-secondary);">Outcome Summary</label><select name="outcomeSummary" id="outcome-summary" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);"><option>Select Outcome Summary</option><option>Target Hit</option><option>Stop Loss Hit</option><option>Exited Early (Profit)</option><option>Exited Early (Loss)</option><option>Break Even</option></select></div>
                                         </div>
                                    </div>
                                    <!-- Financials -->
                                    <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                        <h3 class="text-xl font-semibold mb-6 border-b pb-4" style="color: var(--text-primary); border-color: var(--border-color);">Financials</h3>
                                        <div class="space-y-4">
                                            <div class="flex justify-between items-center"><span class="text-sm" style="color: var(--text-secondary);">Total Amount</span><span id="total-amount" class="font-semibold" style="color: var(--text-primary);">₹0.00</span></div>
                                            <div class="flex justify-between items-center"><span class="text-sm" style="color: var(--text-secondary);">Brokerage</span><input name="brokerage" type="number" step="any" id="brokerage" class="w-24 text-right rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="0.00"></div>
                                            <div class="flex justify-between items-center"><span class="text-sm" style="color: var(--text-secondary);">Other Fees</span><input name="otherFees" type="number" step="any" id="other-fees" class="w-24 text-right rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="0.00"></div>
                                            <div class="border-t my-2" style="border-color: var(--border-color);"></div>
                                            <div class="flex justify-between items-center"><span class="text-sm font-bold" style="color: var(--text-secondary);">P&L Amount</span><span id="pnl-amount" class="font-bold text-lg" style="color: var(--text-primary);">₹0.00</span></div>
                                            <div class="flex justify-between items-center"><span class="text-sm font-bold" style="color: var(--text-secondary);">P&L (%)</span><span id="pnl-percent" class="font-bold text-lg" style="color: var(--text-primary);">0.00%</span></div>
                                        </div>
                                    </div>
                                </div>
                                <!-- Right Column -->
                                <div class="lg:col-span-2 space-y-8">
                                    <!-- Entry & Exit Section -->
                                    <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                        <h3 class="text-xl font-semibold mb-6 border-b pb-4" style="color: var(--text-primary); border-color: var(--border-color);">Execution Details</h3>
                                        <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-6">
                                            <div><label for="entry-date" class="block text-sm font-medium" style="color: var(--text-secondary);">Entry Date & Time</label><input name="entryDate" type="datetime-local" id="entry-date" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" required></div>
                                            <div><label for="exit-date" class="block text-sm font-medium" style="color: var(--text-secondary);">Exit Date & Time</label><input name="exitDate" type="datetime-local" id="exit-date" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);"></div>
                                            <div><label for="entry-price" class="block text-sm font-medium" style="color: var(--text-secondary);">Entry Price</label><input name="entryPrice" type="number" step="any" id="entry-price" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="0.00" required></div>
                                            <div><label for="exit-price" class="block text-sm font-medium" style="color: var(--text-secondary);">Exit Price</label><input name="exitPrice" type="number" step="any" id="exit-price" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="0.00"></div>
                                            <div><label for="quantity" class="block text-sm font-medium" style="color: var(--text-secondary);">Quantity / Lot Size</label><input name="quantity" type="number" id="quantity" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="0" required></div>
                                            <div><label for="exit-quantity" class="block text-sm font-medium" style="color: var(--text-secondary);">Exit Quantity</label><input name="exitQuantity" type="number" id="exit-quantity" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="0"></div>
                                        </div>
                                    </div>
                                    <!-- Qualitative Data -->
                                    <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                         <h3 class="text-xl font-semibold mb-6 border-b pb-4" style="color: var(--text-primary); border-color: var(--border-color);">Trade Journal & Notes</h3>
                                         <label for="reasons" class="block text-sm font-medium" style="color: var(--text-secondary);">Reasons for Entry/Exit, Learnings, etc.</label>
                                         <textarea name="reasons" id="reasons" rows="5" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="What was your thesis for this trade? What did you learn?"></textarea>
                                    </div>
                                </div>
                            </div>
                            <!-- Action Buttons -->
                            <div class="flex justify-end gap-4 pt-4 border-t" style="border-color: var(--border-color);">
                                <button type="button" id="clear-trade-form-btn" class="font-semibold py-2 px-6 rounded-md shadow-sm" style="background-color: var(--bg-tertiary); color: var(--text-secondary);">Reset</button>
                                <button type="submit" class="btn-primary font-semibold py-2 px-6 rounded-md shadow-sm flex items-center justify-center min-w-[120px]">
                                    <span class="btn-text">Save Trade</span>
                                    <span class="spinner hidden"></span>
                                </button>
                            </div>
                        </form>
                    </div>


                    <!-- Trade History Page (Enhanced) -->
                    <div id="trade-history" class="page">
                        <div class="mb-8">
                            <h2 class="text-3xl font-bold" style="color: var(--text-primary);">Enhanced Trade Logs</h2>
                            <p class="text-lg" style="color: var(--text-secondary);">Cleaner, sharper, and more insightful.</p>
                        </div>
                        <div class="rounded-lg shadow-sm overflow-x-auto" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                            <table class="w-full min-w-[1200px] text-sm text-left">
                                <thead class="text-xs uppercase" style="background-color: var(--bg-secondary); color: var(--text-secondary);">
                                    <tr>
                                        <th scope="col" class="px-6 py-3">Symbol</th>
                                        <th scope="col" class="px-6 py-3">Net P&L</th>
                                        <th scope="col" class="px-6 py-3">Status</th>
                                        <th scope="col" class="px-6 py-3">Entry Price</th>
                                        <th scope="col" class="px-6 py-3">Type</th>
                                        <th scope="col" class="px-6 py-3">Entry Date</th>
                                        <th scope="col" class="px-6 py-3">Stop Loss</th>
                                        <th scope="col" class="px-6 py-3">Quantity</th>
                                        <th scope="col" class="px-6 py-3">Exit Price</th>
                                        <th scope="col" class="px-6 py-3">Exit Date</th>
                                        <th scope="col" class="px-6 py-3">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="trade-history-tbody">
                                    <!-- Dynamic content here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <!-- Reports Page -->
                    <div id="reports" class="page">
                        <div class="space-y-8">
                             <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                <h2 class="text-2xl font-bold mb-1" style="color: var(--text-primary);">Performance Metrics</h2>
                                <p style="color: var(--text-secondary);" class="mb-6">Key stats for your trading performance.</p>
                                <div id="reports-metrics-grid" class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4 text-sm">
                                    <!-- Dynamic content here -->
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Trade Calendar Page -->
                    <div id="trade-calendar" class="page">
                         <div id="calendar-stats-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                            <!-- Dynamic content here -->
                        </div>
                        <div class="rounded-lg shadow-sm p-4" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                            <div class="p-2 md:p-0 flex flex-col md:flex-row items-center justify-between gap-4 mb-4">
                                <div class="flex items-center space-x-2 md:space-x-4">
                                    <button id="prev-month-btn" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" style="color: var(--text-primary);">
                                        <i data-feather="chevron-left" class="h-6 w-6"></i>
                                    </button>
                                    <h2 id="calendar-month-year" class="text-xl font-bold whitespace-nowrap" style="color: var(--text-primary);">Month Year</h2>
                                    <button id="next-month-btn" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" style="color: var(--text-primary);">
                                        <i data-feather="chevron-right" class="h-6 w-6"></i>
                                    </button>
                                </div>
                                <div id="monthly-pnl-display" class="font-semibold" style="color: var(--text-primary);">Monthly P&L: ₹0.00</div>
                            </div>
                            <div class="overflow-x-auto">
                                <div class="min-w-[950px]">
                                     <div class="flex gap-2">
                                        <!-- Main calendar part (7 columns) -->
                                        <div class="flex-grow">
                                            <div class="grid grid-cols-7 gap-2 p-2 text-center text-sm font-medium" style="color: var(--text-secondary);">
                                                <div class="bg-gray-100 dark:bg-gray-800/80 rounded-md py-2 weekday-header">Sun</div>
                                                <div class="bg-gray-100 dark:bg-gray-800/80 rounded-md py-2 weekday-header">Mon</div>
                                                <div class="bg-gray-100 dark:bg-gray-800/80 rounded-md py-2 weekday-header">Tue</div>
                                                <div class="bg-gray-100 dark:bg-gray-800/80 rounded-md py-2 weekday-header">Wed</div>
                                                <div class="bg-gray-100 dark:bg-gray-800/80 rounded-md py-2 weekday-header">Thu</div>
                                                <div class="bg-gray-100 dark:bg-gray-800/80 rounded-md py-2 weekday-header">Fri</div>
                                                <div class="bg-gray-100 dark:bg-gray-800/80 rounded-md py-2 weekday-header">Sat</div>
                                            </div>
                                            <div id="calendar-grid-days" class="p-2">
                                                <!-- JS will create week rows here, each being a grid-cols-7 -->
                                            </div>
                                        </div>
                                        <!-- Weekly summaries part (1 column) -->
                                        <div class="w-[140px] flex-shrink-0">
                                            <div class="p-2 text-center text-sm font-medium" style="color: var(--text-secondary);"> <!-- Header placeholder for alignment -->
                                                 <div class="bg-gray-100 dark:bg-gray-800/80 rounded-md py-2 invisible">Summary</div> <!-- Invisible to just take space -->
                                            </div>
                                            <div id="calendar-grid-summaries" class="p-2 flex flex-col gap-2">
                                                <!-- JS will create summary boxes here -->
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Fund Management Page -->
                    <div id="fund-management" class="page">
                         <div class="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
                            <h2 class="text-3xl font-bold" style="color: var(--text-primary);">Funds</h2>
                            <div class="flex items-center space-x-2">
                                <button id="fm-deposit-btn" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm text-sm flex items-center">
                                    <i data-feather="plus" class="mr-2 h-4 w-4"></i> Deposit
                                </button>
                                <button id="fm-withdraw-btn" class="bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm text-sm flex items-center">
                                     <i data-feather="arrow-up-right" class="mr-2 h-4 w-4"></i> Withdraw
                                </button>
                            </div>
                        </div>

                        <!-- Stat Cards -->
                        <div id="fm-stats-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                           <!-- Dynamic Content Here -->
                        </div>

                        <!-- Ledger Table -->
                        <div class="rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                            <div class="overflow-x-auto">
                                <table class="w-full text-sm text-left">
                                    <thead class="text-xs uppercase" style="background-color: var(--bg-secondary); color: var(--text-secondary);">
                                        <tr>
                                            <th class="px-6 py-3 font-medium">Date</th>
                                            <th class="px-6 py-3 font-medium">Type</th>
                                            <th class="px-6 py-3 font-medium">Amount</th>
                                            <th class="px-6 py-3 font-medium">Notes</th>
                                            <th class="px-6 py-3 font-medium">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="fund-ledger-body">
                                        <!-- Dynamic content here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- Trade Statement Page -->
                    <div id="trade-statement" class="page">
                         <!-- Filter Section -->
                        <div class="rounded-lg shadow-sm p-4 mb-6" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4 items-end">
                                <div>
                                    <label for="filter-type" class="block text-sm font-medium" style="color: var(--text-secondary);">Transaction Type</label>
                                    <select id="filter-type" class="w-full rounded-md text-sm border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                                        <option>All Types</option>
                                        <option>Trade</option>
                                        <option>Deposit</option>
                                        <option>Withdrawal</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="filter-strategy" class="block text-sm font-medium" style="color: var(--text-secondary);">Strategy</label>
                                    <select id="filter-strategy" class="w-full rounded-md text-sm border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                                        <option>All Strategies</option>
                                        <option>Nifty Breakout</option>
                                        <option>Price Action</option>
                                        <option>Trend Following</option>
                                        <option>Other</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="filter-start-date" class="block text-sm font-medium" style="color: var(--text-secondary);">Start Date</label>
                                    <input type="date" id="filter-start-date" class="w-full rounded-md text-sm border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                                </div>
                                <div>
                                    <label for="filter-end-date" class="block text-sm font-medium" style="color: var(--text-secondary);">End Date</label>
                                    <input type="date" id="filter-end-date" class="w-full rounded-md text-sm border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                                </div>
                                <button id="apply-filter-btn" class="btn-primary font-semibold py-2 px-4 rounded-md shadow-sm w-full h-fit">Apply</button>
                                <button id="reset-filter-btn" class="font-semibold py-2 px-4 rounded-md shadow-sm w-full h-fit" style="background-color: var(--bg-tertiary); color: var(--text-secondary);">Reset</button>
                            </div>
                        </div>

                        <div class="rounded-lg shadow-sm overflow-x-auto" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                            <table class="w-full min-w-[1200px] text-sm text-left">
                                <thead class="text-xs uppercase" style="background-color: var(--bg-secondary); color: var(--text-secondary);">
                                    <tr>
                                        <th scope="col" class="px-6 py-3">Date</th>
                                        <th scope="col" class="px-6 py-3">Type</th>
                                        <th scope="col" class="px-6 py-3">Symbol/Desc</th>
                                        <th scope="col" class="px-6 py-3">Strategy</th>
                                        <th scope="col" class="px-6 py-3">Gross P/L</th>
                                        <th scope="col" class="px-6 py-3">Charges</th>
                                        <th scope="col" class="px-6 py-3">Net P/L</th>
                                        <th scope="col" class="px-6 py-3">Amount (₹)</th>
                                        <th scope="col" class="px-6 py-3">Notes</th>
                                    </tr>
                                </thead>
                                <tbody id="statement-tbody">
                                    <!-- Dynamic content here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <!-- Profile Page -->
                    <div id="profile" class="page">
                        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                            <div class="lg:col-span-2 space-y-8">
                                <div class="rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                    <div class="p-6">
                                        <h3 class="text-xl font-bold mb-6" style="color: var(--text-primary);">Profile Information</h3>
                                        <form id="profile-info-form" class="space-y-6">
                                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                                <div>
                                                    <label class="block text-sm font-medium" style="color: var(--text-secondary);">Full Name</label>
                                                    <input type="text" id="profile-name" name="name" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium" style="color: var(--text-secondary);">Email Address</label>
                                                    <input type="email" id="profile-email" class="mt-1 w-full rounded-md" style="background-color: var(--bg-tertiary);" disabled>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium" style="color: var(--text-secondary);">Contact Number</label>
                                                    <input type="tel" id="profile-phone" name="phone" placeholder="+91 XXXXX XXXXX" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium" style="color: var(--text-secondary);">City</label>
                                                    <input type="text" id="profile-city" name="city" placeholder="e.g. Mumbai" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                                                </div>
                                            </div>
                                            <div>
                                                <button type="submit" class="bg-slate-600 hover:bg-slate-700 text-white font-semibold py-2 px-6 rounded-md shadow-sm flex items-center justify-center min-w-[150px]">
                                                    <span class="btn-text">Save Changes</span>
                                                    <span class="spinner hidden"></span>
                                                </button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                                 <div class="rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                    <div class="p-6">
                                        <h3 class="text-xl font-bold mb-6" style="color: var(--text-primary);">Change Password</h3>
                                        <form id="change-password-form" class="space-y-6">
                                            <div>
                                                <label class="block text-sm font-medium" style="color: var(--text-secondary);">Current Password</label>
                                                <input type="password" id="current-password" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                                            </div>
                                             <div>
                                                <label class="block text-sm font-medium" style="color: var(--text-secondary);">New Password</label>
                                                <input type="password" id="new-password" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                                            </div>
                                             <div>
                                                <label class="block text-sm font-medium" style="color: var(--text-secondary);">Confirm New Password</label>
                                                <input type="password" id="confirm-new-password" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                                            </div>
                                            <div>
                                                <button type="submit" class="btn-primary font-semibold py-2 px-6 rounded-md shadow-sm flex items-center justify-center min-w-[180px]">
                                                     <span class="btn-text">Update Password</span>
                                                     <span class="spinner hidden"></span>
                                                </button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                            <div class="lg:col-span-1 space-y-8">
                                <div class="rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                    <div class="p-6">
                                        <h3 class="text-xl font-bold mb-4" style="color: var(--text-primary);">Account</h3>
                                        <div class="space-y-3">
                                            <p class="text-sm" style="color: var(--text-secondary);">Member Since</p>
                                            <p id="profile-member-since" class="font-semibold"></p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Challenge Page -->
                    <div id="challenge" class="page">
                        <div id="challenge-stats-view">
                            <div id="challenge-active-wrapper">
                                <div class="flex items-center justify-between mb-8">
                                    <h2 class="text-3xl font-bold" style="color: var(--text-primary);">Capital Growth Challenge</h2>
                                    <button id="set-challenge-btn" class="btn-primary font-semibold py-2 px-4 rounded-md shadow-sm text-sm">Set Challenge</button>
                                </div>
                                <div id="challenge-active-container" class="space-y-8 hidden">
                                    <p class="text-lg" style="color: var(--text-secondary);">Track your progress towards your trading goals with real-time analytics and performance metrics.</p>
                                    
                                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                                        <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                            <h3 class="text-sm font-medium" style="color: var(--text-secondary);">Days Remaining</h3>
                                            <p id="challenge-days-remaining" class="text-2xl font-bold mt-2" style="color: var(--text-primary);">0</p>
                                            <p id="challenge-end-date" class="text-xs" style="color: var(--text-muted);">01 Jan 1970</p>
                                        </div>
                                        <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                            <h3 class="text-sm font-medium" style="color: var(--text-secondary);">Current Capital</h3>
                                            <p id="challenge-current-capital" class="text-2xl font-bold mt-2">₹0.00</p>
                                            <p id="challenge-target-capital" class="text-xs" style="color: var(--text-muted);">Target: ₹0.00</p>
                                        </div>
                                        <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                            <h3 class="text-sm font-medium" style="color: var(--text-secondary);">Daily Target</h3>
                                            <p id="challenge-daily-target" class="text-2xl font-bold mt-2" style="color: var(--text-primary);">₹0.00</p>
                                            <p class="text-xs" style="color: var(--text-muted);">Profit needed per day</p>
                                        </div>
                                        <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                            <h3 class="text-sm font-medium" style="color: var(--text-secondary);">Win Rate</h3>
                                            <p id="challenge-win-rate" class="text-2xl font-bold mt-2" style="color: var(--text-primary);">0.00%</p>
                                            <p class="text-xs" style="color: var(--text-muted);">Of challenge period</p>
                                        </div>
                                    </div>
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                                        <div class="p-6 rounded-lg shadow-sm flex items-center justify-center" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                            <div class="relative h-48 w-48">
                                                <canvas id="challengeProgressChart"></canvas>
                                                <div class="absolute inset-0 flex items-center justify-center flex-col">
                                                    <p id="challenge-progress-percent" class="text-3xl font-bold" style="color: var(--text-primary);">0%</p>
                                                    <p class="text-sm" style="color: var(--text-secondary);">Progress</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                                            <h3 class="text-xl font-bold mb-4" style="color: var(--text-primary);">Key Metrics</h3>
                                            <div class="space-y-4">
                                                <div class="flex justify-between items-center border-b pb-2" style="border-color: var(--border-color);">
                                                    <span class="text-sm" style="color: var(--text-secondary);">Average Risk/Reward</span>
                                                    <span id="challenge-avg-rr" class="font-semibold" style="color: var(--text-primary);">0:0</span>
                                                </div>
                                                <div class="flex justify-between items-center border-b pb-2" style="border-color: var(--border-color);">
                                                    <span class="text-sm" style="color: var(--text-secondary);">Highest Profit Day</span>
                                                    <span id="challenge-highest-profit" class="font-semibold text-green-500">₹0.00</span>
                                                </div>
                                                <div class="flex justify-between items-center pb-2" style="border-color: var(--border-color);">
                                                    <span class="text-sm" style="color: var(--text-secondary);">Max Drawdown</span>
                                                    <span id="challenge-max-drawdown" class="font-semibold text-red-500">0.00%</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="challenge-inactive-container" class="flex flex-col items-center justify-center p-12 text-center" style="background-color: var(--bg-primary); border: 1px solid var(--border-color); border-radius: 0.5rem;">
                                <i data-feather="award" class="h-16 w-16 mb-4" style="color: var(--text-muted);"></i>
                                <h3 class="text-xl font-semibold mb-2" style="color: var(--text-primary);">No Active Challenge</h3>
                                <p class="text-sm mb-6" style="color: var(--text-secondary);">Set a new challenge to track your progress towards a specific goal.</p>
                                <button id="set-challenge-btn-inactive" class="btn-primary font-semibold py-2 px-6 rounded-md shadow-sm">Start a New Challenge</button>
                            </div>
                        </div>

                        <div class="mt-12">
                            <h3 class="text-2xl font-bold mb-6" style="color: var(--text-primary);">Challenge History</h3>
                            <div id="challenge-history-container" class="space-y-4">
                                <!-- History items will be injected here -->
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
        <!-- Sidebar Overlay -->
        <div id="sidebar-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden md:hidden"></div>
    </div>

    <!-- Trade Saved Success Modal -->
    <div id="trade-saved-modal" class="modal-overlay hidden">
        <div class="w-full max-w-md m-4 rounded-lg shadow-xl text-center" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
            <div class="p-8">
                <div class="w-16 h-16 mx-auto flex items-center justify-center rounded-full bg-green-100 mb-4">
                    <i data-feather="check-circle" class="h-8 w-8 text-green-600"></i>
                </div>
                <h3 class="text-xl font-bold" style="color: var(--text-primary);">Trade Saved Successfully!</h3>
                <p class="text-sm mt-2 mb-6" style="color: var(--text-secondary);">The more you write, the more you grow. Stay focused!</p>

                <div class="p-4 rounded-lg" style="background-color: var(--bg-secondary);">
                    <h4 class="font-semibold text-md mb-4" style="color: var(--text-primary);">Comparison with Previous Day's P&L</h4>
                    <div class="flex justify-around items-center mb-4">
                        <div>
                            <p class="text-xs" style="color: var(--text-muted);">Today's P&L</p>
                            <p id="tsm-today-pnl" class="font-bold text-lg text-green-500">+₹0.00</p>
                        </div>
                        <div class="border-l h-10" style="border-color: var(--border-color);"></div>
                        <div>
                            <p class="text-xs" style="color: var(--text-muted);">Yesterday's P&L</p>
                            <p id="tsm-yesterday-pnl" class="font-bold text-lg text-green-500">+₹0.00</p>
                        </div>
                    </div>
                    <div class="flex items-center justify-center text-xs p-2 rounded" style="background-color: var(--bg-primary);">
                        <i data-feather="arrow-up" class="h-4 w-4 text-green-500 mr-1"></i>
                        <span id="tsm-comparison-text" style="color: var(--text-secondary);">You saw an increase of ₹0.00 in your pnl.</span>
                    </div>
                </div>

                <button id="trade-saved-close-btn" class="mt-6 w-full btn-primary font-semibold py-2 px-6 rounded-md shadow-sm">Keep Journaling</button>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmation-modal" class="modal-overlay hidden">
        <div class="w-full max-w-sm m-4 rounded-lg shadow-xl" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
            <div class="p-6">
                <div class="flex items-start gap-4">
                    <div class="flex-shrink-0 w-12 h-12 flex items-center justify-center rounded-full bg-red-100">
                        <i data-feather="alert-triangle" class="h-6 w-6 text-red-600"></i>
                    </div>
                    <div>
                        <h3 id="confirmation-title" class="text-lg font-semibold" style="color: var(--text-primary);">Confirmation</h3>
                        <p id="confirmation-message" class="text-sm mt-1" style="color: var(--text-secondary);">Are you sure? This action cannot be undone.</p>
                    </div>
                </div>
            </div>
            <div class="p-4 border-t flex justify-end items-center space-x-3" style="background-color: var(--bg-secondary); border-color: var(--border-color);">
                <button type="button" id="confirmation-cancel-btn" class="border font-semibold py-2 px-4 rounded-md shadow-sm" style="background-color: var(--bg-primary); border-color: var(--border-color); color: var(--text-primary);">Cancel</button>
                <button type="button" id="confirmation-confirm-btn" class="bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-6 rounded-md shadow-sm">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <div id="transaction-modal" class="modal-overlay hidden">
        <div class="w-full max-w-md m-4 rounded-lg shadow-xl" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
             <form id="transaction-form">
                <input type="hidden" id="ledger-id" name="ledgerId">
                <div class="p-6 border-b flex justify-between items-center" style="border-color: var(--border-color);">
                    <h3 id="transaction-modal-title" class="text-xl font-semibold" style="color: var(--text-primary);">Deposit Funds</h3>
                    <button type="button" class="close-modal-btn p-1 rounded-full" style="background-color: var(--bg-secondary); color: var(--text-primary);">
                        <i data-feather="x" class="h-5 w-5"></i>
                    </button>
                </div>
                <div class="p-6 space-y-4">
                    <div>
                        <label for="transaction-amount" class="block text-sm font-medium" style="color: var(--text-secondary);">Amount (₹)</label>
                        <input type="number" step="0.01" id="transaction-amount" class="mt-1 block w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="0.00" required>
                    </div>
                     <div>
                        <label for="transaction-date" class="block text-sm font-medium" style="color: var(--text-secondary);">Date</label>
                        <input type="date" id="transaction-date" class="mt-1 block w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" required>
                    </div>
                     <div>
                        <label for="transaction-notes" class="block text-sm font-medium" style="color: var(--text-secondary);">Notes (Optional)</label>
                        <textarea id="transaction-notes" rows="2" class="mt-1 w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);"></textarea>
                    </div>
                </div>
                <div class="p-4 border-t flex justify-end items-center space-x-3" style="background-color: var(--bg-secondary); border-color: var(--border-color);">
                    <button type="button" class="close-modal-btn border font-semibold py-2 px-4 rounded-md shadow-sm" style="background-color: var(--bg-primary); border-color: var(--border-color); color: var(--text-primary);">Cancel</button>
                    <button type="submit" id="transaction-submit-btn" class="btn-primary font-semibold py-2 px-6 rounded-md shadow-sm flex items-center justify-center min-w-[140px]">
                        <span class="btn-text">Add Deposit</span>
                        <span class="spinner hidden"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Challenge Modal -->
    <div id="challenge-modal" class="modal-overlay hidden">
        <div class="w-full max-w-md m-4 rounded-lg shadow-xl" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
             <form id="challenge-form">
                <input type="hidden" id="challenge-id" name="challengeId">
                <div class="p-6 border-b flex justify-between items-center" style="border-color: var(--border-color);">
                    <h3 id="challenge-modal-title" class="text-xl font-semibold" style="color: var(--text-primary);">Set Trading Challenge</h3>
                    <button type="button" class="close-modal-btn p-1 rounded-full" style="background-color: var(--bg-secondary); color: var(--text-primary);">
                        <i data-feather="x" class="h-5 w-5"></i>
                    </button>
                </div>
                <div class="p-6 space-y-4">
                    <div>
                        <label for="starting-capital" class="block text-sm font-medium" style="color: var(--text-secondary);">Starting Capital (₹)</label>
                        <input type="number" step="1000" id="starting-capital" class="mt-1 block w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="100000" required>
                    </div>
                    <div>
                        <label for="target-capital" class="block text-sm font-medium" style="color: var(--text-secondary);">Target Capital (₹)</label>
                        <input type="number" step="1000" id="target-capital" class="mt-1 block w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="200000" required>
                    </div>
                    <div>
                        <label for="timeframe" class="block text-sm font-medium" style="color: var(--text-secondary);">Timeframe</label>
                        <select id="timeframe" class="mt-1 block w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);">
                            <option value="7">1 Week</option>
                            <option value="30">1 Month</option>
                            <option value="90">3 Months</option>
                            <option value="180">6 Months</option>
                            <option value="365">1 Year</option>
                        </select>
                    </div>
                    <div>
                        <label for="max-risk" class="block text-sm font-medium" style="color: var(--text-secondary);">Max Risk Per Trade (%)</label>
                        <input type="number" step="0.1" id="max-risk" class="mt-1 block w-full rounded-md border focus:border-blue-500 focus:ring-blue-500" style="background-color: var(--bg-primary); color: var(--text-primary); border-color: var(--border-color);" placeholder="2" required>
                    </div>
                </div>
                <div class="p-4 border-t flex justify-end items-center space-x-3" style="background-color: var(--bg-secondary); border-color: var(--border-color);">
                    <button type="button" class="close-modal-btn border font-semibold py-2 px-4 rounded-md shadow-sm" style="background-color: var(--bg-primary); border-color: var(--border-color); color: var(--text-primary);">Cancel</button>
                    <button type="submit" id="challenge-submit-btn" class="btn-primary font-semibold py-2 px-6 rounded-md shadow-sm flex items-center justify-center min-w-[140px]">
                        <span class="btn-text">Set Challenge</span>
                        <span class="spinner hidden"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- New Trading Details Modal -->
    <div id="trade-details-modal" class="trade-details-modal">
        <div class="relative">
             <div class="modal-header flex justify-between items-center">
                <div>
                    <h3 class="text-lg font-bold">Trading Details</h3>
                    <p id="modal-date" class="text-sm" style="color: #94a3b8;"></p>
                </div>
                <button type="button" class="close-btn">&times;</button>
             </div>
             <div class="modal-content">
                 <div class="modal-stats-grid">
                     <div class="stat-card">
                         <div>
                             <p class="stat-card-label">Total P&L</p>
                             <p id="modal-total-pnl" class="stat-card-value">₹0.00</p>
                         </div>
                         <div class="stat-card-icon" style="background-color: rgba(34, 197, 94, 0.2); color: #22c55e;"><i data-feather="trending-up"></i></div>
                     </div>
                     <div class="stat-card">
                         <div>
                             <p class="stat-card-label">Average R:R</p>
                             <p id="modal-avg-rr" class="stat-card-value">0:0</p>
                         </div>
                         <div class="stat-card-icon" style="background-color: rgba(59, 130, 246, 0.2); color: #3b82f6;"><i data-feather="target"></i></div>
                     </div>
                     <div class="stat-card">
                         <div>
                             <p class="stat-card-label">Total Trades</p>
                             <p id="modal-total-trades" class="stat-card-value">0</p>
                         </div>
                          <div class="stat-card-icon" style="background-color: rgba(234, 179, 8, 0.2); color: #eab308;"><i data-feather="list"></i></div>
                     </div>
                     <div class="stat-card">
                         <div>
                             <p class="stat-card-label">Win Rate</p>
                             <p id="modal-win-rate" class="stat-card-value">0%</p>
                         </div>
                         <div class="stat-card-icon" style="background-color: rgba(245, 158, 11, 0.2); color: #f59e0b;"><i data-feather="award"></i></div>
                     </div>
                 </div>
                 <div class="overflow-y-auto max-h-64">
                    <table class="trades-table">
                        <thead>
                            <tr>
                                <th>Symbol</th>
                                <th>Side</th>
                                <th>Size</th>
                                <th>Entry</th>
                                <th>Exit</th>
                                <th>P&L</th>
                            </tr>
                        </thead>
                        <tbody id="modal-trades-tbody">
                        </tbody>
                    </table>
                 </div>
             </div>
        </div>
    </div>
        
    <!-- Scroll to Top Button -->
    <button id="scroll-to-top-btn" class="hidden fixed bottom-8 right-8 bg-blue-600 text-white p-3 rounded-full shadow-lg hover:bg-blue-700 transition-all duration-300 z-20">
        <i data-feather="arrow-up" class="h-6 w-6"></i>
    </button>

    <!-- Firebase SDKs -->
    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { 
            getAuth, 
            onAuthStateChanged, 
            signInWithCustomToken,
            signInAnonymously,
            updateProfile,
            signOut 
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { 
            getFirestore,
            setDoc,
            doc,
            addDoc,
            getDoc,
            updateDoc,
            deleteDoc,
            collection,
            query,
            where,
            onSnapshot,
            serverTimestamp,
            orderBy,
            writeBatch,
            limit,
            getDocs
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Your web app's Firebase configuration
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {
            apiKey: "YOUR_API_KEY",
            authDomain: "YOUR_AUTH_DOMAIN",
            projectId: "YOUR_PROJECT_ID",
            storageBucket: "YOUR_STORAGE_BUCKET",
            messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
            appId: "YOUR_APP_ID"
        };
        const appId = typeof __app_id !== 'undefined' ? __app_id.replace(/[\/.]/g, '_') : 'default-app-id';

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // --- GLOBAL APP STATE ---
        const appState = {
            theme: localStorage.getItem('theme') || 'light',
            calendarDate: new Date(),
            user: null,
            trades: [],
            ledger: [],
            challenge: null,
            challengeHistory: [],
            achievements: [],
            accountValue: 0,
            unsubscribeTrades: () => {},
            unsubscribeLedger: () => {},
            unsubscribeProfile: () => {},
            unsubscribeChallenge: () => {},
            unsubscribeChallengeHistory: () => {},
            unsubscribeAchievements: () => {},
        };

        // --- UI ELEMENTS ---
        const appContainer = document.getElementById('app-container');
        const mainContent = document.getElementById('main-content');
        const pageTitle = document.getElementById('page-title');
        const themeToggleInput = document.getElementById('theme-toggle-input');
        const sidebar = document.getElementById('sidebar');
        const menuToggleBtn = document.getElementById('menu-toggle-btn');
        const sidebarOverlay = document.getElementById('sidebar-overlay');
        const confirmationModal = document.getElementById('confirmation-modal');
        
        // --- UTILITY FUNCTIONS ---
        const showToast = (message, type = 'info') => {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            
            let icon = '';
            if (type === 'success') icon = 'check-circle';
            if (type === 'error') icon = 'alert-circle';
            if (type === 'info') icon = 'info';

            toast.innerHTML = `<i data-feather="${icon}" class="h-5 w-5"></i><span>${message}</span>`;
            
            container.appendChild(toast);
            feather.replace();

            setTimeout(() => toast.classList.add('show'), 10);
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 500);
            }, 4000);
        };

        const toggleSpinner = (button, show) => {
            const spinner = button.querySelector('.spinner');
            const btnText = button.querySelector('.btn-text');
            if (spinner && btnText) {
                spinner.classList.toggle('hidden', !show);
                btnText.classList.toggle('hidden', show);
            }
            button.disabled = show;
        };
        
        const formatCurrency = (value) => {
             return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(value || 0);
        };
        const formatDate = (date, includeTime = false) => {
            if (!date) return '-';
            const d = date.toDate ? date.toDate() : new Date(date);
            const options = { day: 'numeric', month: 'long', year: 'numeric' };
            if (includeTime) {
                options.hour = '2-digit';
                options.minute = '2-digit';
            }
            return d.toLocaleDateString('en-GB', options);
        };
        
        const countTradingDays = (startDate, endDate) => {
            let count = 0;
            const curDate = new Date(startDate.getTime());
            while (curDate <= endDate) {
                const dayOfWeek = curDate.getDay();
                if (dayOfWeek !== 0 && dayOfWeek !== 6) { // 0=Sun, 6=Sat
                    count++;
                }
                curDate.setDate(curDate.getDate() + 1);
            }
            return count;
        };
        
        const calculateNetPnl = (trade) => {
            if (!trade.exitPrice || !trade.exitDate) return 0;
            const grossPnl = (trade.exitPrice - trade.entryPrice) * trade.quantity * (trade.direction === 'Short' ? -1 : 1);
            const brokerage = trade.brokerage || 0;
            const otherFees = trade.otherFees || 0;
            return grossPnl - brokerage - otherFees;
        };

        // --- Trade Saved Modal ---
        const tradeSavedModal = document.getElementById('trade-saved-modal');
        const showTradeSavedModal = () => {
            const allTrades = appState.trades.filter(t => t.exitDate);
            const now = new Date();
            const todayStr = now.toISOString().split('T')[0];
            
            const yesterday = new Date();
            yesterday.setDate(now.getDate() - 1);
            const yesterdayStr = yesterday.toISOString().split('T')[0];

            let todaysPnl = 0;
            let yesterdaysPnl = 0;

            allTrades.forEach(trade => {
                const tradeDateStr = trade.exitDate.toDate().toISOString().split('T')[0];
                const pnl = calculateNetPnl(trade);
                if (tradeDateStr === todayStr) {
                    todaysPnl += pnl;
                } else if (tradeDateStr === yesterdayStr) {
                    yesterdaysPnl += pnl;
                }
            });

            const pnlDifference = todaysPnl - yesterdaysPnl;

            const todayPnlEl = document.getElementById('tsm-today-pnl');
            todayPnlEl.textContent = `${todaysPnl >= 0 ? '+' : ''}${formatCurrency(todaysPnl)}`;
            todayPnlEl.className = `font-bold text-lg ${todaysPnl >= 0 ? 'text-green-500' : 'text-red-500'}`;
            
            const yesterdayPnlEl = document.getElementById('tsm-yesterday-pnl');
            yesterdayPnlEl.textContent = `${yesterdaysPnl >= 0 ? '+' : ''}${formatCurrency(yesterdaysPnl)}`;
            yesterdayPnlEl.className = `font-bold text-lg ${yesterdaysPnl >= 0 ? 'text-green-500' : 'text-red-500'}`;

            const comparisonTextEl = document.getElementById('tsm-comparison-text');
            const comparisonIconContainer = comparisonTextEl.previousElementSibling;
            
            if (pnlDifference >= 0) {
                comparisonTextEl.textContent = `You saw an increase of ${formatCurrency(pnlDifference)} in your pnl compared to the last session!`;
                comparisonIconContainer.innerHTML = `<i data-feather="arrow-up" class="h-4 w-4 text-green-500 mr-1"></i>`;
            } else {
                comparisonTextEl.textContent = `You saw a decrease of ${formatCurrency(Math.abs(pnlDifference))} in your pnl compared to the last session.`;
                comparisonIconContainer.innerHTML = `<i data-feather="arrow-down" class="h-4 w-4 text-red-500 mr-1"></i>`;
            }
            
            tradeSavedModal.classList.remove('hidden');
            feather.replace();
        };

        document.getElementById('trade-saved-close-btn').addEventListener('click', () => {
            tradeSavedModal.classList.add('hidden');
            navigateTo('trade-history'); // Navigate after closing modal
        });

        // --- Confirmation Modal ---
        let confirmCallback = null;
        const showConfirmationModal = (message, onConfirm, title = "Confirm Deletion", confirmText = "Delete") => {
            document.getElementById('confirmation-message').textContent = message;
            document.getElementById('confirmation-title').textContent = title;
            document.getElementById('confirmation-confirm-btn').textContent = confirmText;
            confirmCallback = onConfirm;
            confirmationModal.classList.remove('hidden');
            feather.replace(); // To render the alert icon
        };
        const hideConfirmationModal = () => {
            confirmationModal.classList.add('hidden');
            confirmCallback = null;
        };
        document.getElementById('confirmation-confirm-btn').addEventListener('click', () => {
            if (typeof confirmCallback === 'function') {
                confirmCallback();
            }
            hideConfirmationModal();
        });
        document.getElementById('confirmation-cancel-btn').addEventListener('click', hideConfirmationModal);


        // --- THEME MANAGEMENT ---
        const applyTheme = () => {
            const isDark = appState.theme === 'dark';
            document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
            
            // Check if the theme toggle exists before trying to set its state
            if (themeToggleInput) {
                themeToggleInput.checked = isDark;
            }

            // Only render charts if a user is logged in
            if (appState.user) {
                renderAllCharts();
            }
        };

        // Ensure the theme toggle exists before adding a listener
        if (themeToggleInput) {
            themeToggleInput.addEventListener('change', () => {
                appState.theme = themeToggleInput.checked ? 'dark' : 'light';
                localStorage.setItem('theme', appState.theme);
                applyTheme();
            });
        }
        
        // --- SIDEBAR TOGGLE FOR MOBILE ---
        const toggleSidebar = () => {
            sidebar.classList.toggle('-translate-x-full');
            sidebarOverlay.classList.toggle('hidden');
        };

        menuToggleBtn?.addEventListener('click', toggleSidebar);
        sidebarOverlay?.addEventListener('click', toggleSidebar);

        document.querySelectorAll('#sidebar .nav-item').forEach(item => {
            item.addEventListener('click', () => {
                if (window.innerWidth < 768) { // md breakpoint
                    toggleSidebar();
                }
            });
        });


        // --- AUTHENTICATION ---
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                appState.user = user;
                appContainer.classList.remove('hidden');
                document.getElementById('user-display-name').textContent = user.displayName || 'Guest';
                
                appState.unsubscribeTrades();
                appState.unsubscribeLedger();
                appState.unsubscribeProfile();
            appState.unsubscribeChallenge();
            appState.unsubscribeChallengeHistory();
            appState.unsubscribeAchievements();

            setupFirestoreListeners();
            
            navigateTo('dashboard');
                applyTheme(); // Apply theme after user is authenticated and UI is ready
            } else {
                try {
                    if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                        await signInWithCustomToken(auth, __initial_auth_token);
                    } else {
                        const userCredential = await signInAnonymously(auth);
                        const newUser = userCredential.user;
                        const profileRef = doc(db, `artifacts/${appId}/users/${newUser.uid}/profile`, 'info');
                        const profileSnap = await getDoc(profileRef);
                        if (!profileSnap.exists()) {
                             await setDoc(profileRef, {
                                name: 'Guest User',
                                email: `guest_${newUser.uid.substring(0,5)}@example.com`,
                                createdAt: serverTimestamp(),
                            });
                            await updateProfile(newUser, { displayName: "Guest User" });
                        }
                    }
                } catch (error) {
                    console.error("Automatic sign-in failed:", error);
                    showToast("Could not start the application.", "error");
                }
            }
        });

        const updateTradeDependentUI = () => {
            renderDashboard();
            renderTradeHistory();
            renderCalendar();
            renderReports();
            renderStatement();
            renderChallenge(); // Add this line to update the challenge on new trades
        };

        const updateLedgerDependentUI = () => {
            renderDashboard();
            renderFundManagement();
            renderStatement();
        };

        const setupFirestoreListeners = () => {
            if (!appState.user) return;
            const userId = appState.user.uid;
            
            // --- Trades Listener ---
            const tradesRef = collection(db, `artifacts/${appId}/users/${userId}/trades`);
            const qTrades = query(tradesRef, orderBy("entryDate", "desc"));
            appState.unsubscribeTrades = onSnapshot(qTrades, (snapshot) => {
                appState.trades = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                updateTradeDependentUI();
            }, (error) => {
                console.error("Error fetching trades:", error);
                showToast("Could not fetch trades.", "error");
            });

            // --- Ledger Listener ---
            const ledgerRef = collection(db, `artifacts/${appId}/users/${userId}/ledger`);
            const qLedger = query(ledgerRef, orderBy("date", "desc"));
            appState.unsubscribeLedger = onSnapshot(qLedger, (snapshot) => {
                appState.ledger = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                 updateLedgerDependentUI();
            }, (error) => {
                console.error("Error fetching ledger:", error);
                showToast("Could not fetch fund data.", "error");
            });
            
             // --- Profile Listener ---
            const profileRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'info');
            appState.unsubscribeProfile = onSnapshot(profileRef, (doc) => {
                if (doc.exists()) {
                    renderProfilePage(doc.data());
                }
            });

            // --- Challenge Listener ---
            const challengesRef = collection(db, `artifacts/${appId}/users/${userId}/challenges`);
            const qChallenge = query(challengesRef, where("status", "==", "active"), limit(1));
            appState.unsubscribeChallenge = onSnapshot(qChallenge, (snapshot) => {
                if (!snapshot.empty) {
                    const doc = snapshot.docs[0];
                    appState.challenge = { id: doc.id, ...doc.data() };
                } else {
                    appState.challenge = null;
                }
                renderChallenge(); // Directly call renderChallenge to update its state
            });

            // --- Challenge History Listener ---
            const qHistory = query(challengesRef, where("status", "in", ["completed", "failed"]));
            appState.unsubscribeChallengeHistory = onSnapshot(qHistory, (snapshot) => {
                const history = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                // Sort client-side to avoid needing a composite index
                history.sort((a, b) => {
                    const dateA = a.completedAt ? a.completedAt.toDate() : 0;
                    const dateB = b.completedAt ? b.completedAt.toDate() : 0;
                    return dateB - dateA; // descending
                });
                appState.challengeHistory = history;
                renderChallengeHistory();
            }, (error) => {
                console.error("Error fetching challenge history:", error);
            });
            
            // --- Achievements Listener ---
            const achievementsRef = collection(db, `artifacts/${appId}/users/${userId}/achievements`);
            const qAchievements = query(achievementsRef, orderBy("awardedAt", "desc"));
            appState.unsubscribeAchievements = onSnapshot(qAchievements, (snapshot) => {
                appState.achievements = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAchievements();
            }, (error) => {
                console.error("Error fetching achievements:", error);
            });
        };
        
        const updateAllUI = () => {
            renderDashboard();
            renderTradeHistory();
            renderFundManagement();
            renderCalendar();
            renderReports();
            renderStatement();
            renderChallenge();
            renderChallengeHistory();
            renderAchievements();
        };

        document.querySelectorAll('.logout-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                e.preventDefault();
                await signOut(auth);
                // After signing out, onAuthStateChanged will handle re-authentication automatically.
                showToast("Session has been reset.", "info");
            });
        });

        // --- PAGE NAVIGATION ---
        const pages = document.querySelectorAll('.page');
        const navItems = document.querySelectorAll('.nav-item');
        
        const navigateTo = (pageId) => {
            pages.forEach(p => p.classList.remove('active'));
            const newPage = document.getElementById(pageId);
            if (newPage) newPage.classList.add('active');
            mainContent.scrollTo(0, 0); 

            navItems.forEach(item => item.classList.remove('active'));
            const activeNavItem = document.querySelector(`.nav-item[data-page="${pageId}"]`);
            if(activeNavItem) {
                activeNavItem.classList.add('active');
                pageTitle.textContent = activeNavItem.querySelector('span').textContent.trim();
            }
            if (pageId === 'add-trade') {
                clearTradeForm();
            }
        };
        navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                navigateTo(item.dataset.page);
            });
        });

        // --- DASHBOARD RENDERING ---
        const renderDashboard = () => {
            const { trades, ledger } = appState;
            const closedTrades = trades.filter(t => t.exitPrice && t.exitDate);

            let netPnl = 0;
            let grossProfit = 0;
            let grossLoss = 0;
            let wins = 0;
            let losses = 0;
            
            closedTrades.forEach(trade => {
                const pnl = calculateNetPnl(trade);
                netPnl += pnl;
                if (pnl > 0) {
                    wins++;
                    grossProfit += pnl;
                } else {
                    losses++;
                    grossLoss += Math.abs(pnl);
                }
            });

            const totalTrades = closedTrades.length;
            const winRate = totalTrades > 0 ? (wins / totalTrades) * 100 : 0;
            const profitFactor = grossLoss > 0 ? grossProfit / grossLoss : 0;
            const avgWin = wins > 0 ? grossProfit / wins : 0;
            const avgLoss = losses > 0 ? grossLoss / losses : 0;
            const avgWinLossRatio = avgLoss > 0 ? avgWin / avgLoss : 0;

            document.getElementById('db-net-pnl').textContent = formatCurrency(netPnl);
            document.getElementById('db-net-pnl').className = `text-2xl font-bold mt-2 ${netPnl >= 0 ? 'text-green-500' : 'text-red-500'}`;
            document.getElementById('db-total-trades').textContent = `${totalTrades} trades`;
            document.getElementById('db-win-rate').textContent = `${winRate.toFixed(1)}%`;
            document.getElementById('db-won-trades').textContent = `${wins} won`;
            document.getElementById('db-lost-trades').textContent = `${losses} lost`;
            document.getElementById('db-profit-factor').textContent = profitFactor.toFixed(2);
            document.getElementById('db-avg-win-loss').textContent = avgWinLossRatio.toFixed(2);
            document.getElementById('db-avg-win').textContent = `+${formatCurrency(avgWin)}`;
            document.getElementById('db-avg-loss').textContent = `-${formatCurrency(avgLoss)}`;
            
            // Account Summary
            const deposits = ledger.filter(l => l.type === 'Deposit').reduce((sum, l) => sum + l.amount, 0);
            const withdrawals = ledger.filter(l => l.type === 'Withdrawal').reduce((sum, l) => sum + l.amount, 0);
            const openTrades = trades.filter(t => !t.exitDate);
            const deployedCapital = openTrades.reduce((sum, t) => sum + (t.entryPrice * t.quantity), 0);
            const accountValue = deposits - withdrawals + netPnl;
            appState.accountValue = accountValue; // Store for other functions
            const availableCash = accountValue - deployedCapital;

            const summaryEl = document.getElementById('db-account-summary');
            const summaryTextClasses = "text-2xl font-bold";
            summaryEl.innerHTML = `
                <div><p class="text-sm" style="color: var(--text-secondary);">NET ACCOUNT VALUE</p><p class="${summaryTextClasses} ${accountValue >= 0 ? 'text-green-500' : 'text-red-500'}">${formatCurrency(accountValue)}</p></div>
                <div><p class="text-sm" style="color: var(--text-secondary);">NET REALIZED P&L</p><p class="${summaryTextClasses} ${netPnl >= 0 ? 'text-green-500' : 'text-red-500'}">${formatCurrency(netPnl)}</p></div>
                <div><p class="text-sm" style="color: var(--text-secondary);">AVAILABLE CASH</p><p class="${summaryTextClasses}">${formatCurrency(availableCash)}</p></div>
                <div><p class="text-sm" style="color: var(--text-secondary);">DEPLOYED CAPITAL</p><p class="${summaryTextClasses}">${formatCurrency(deployedCapital)}</p></div>
                <div><p class="text-sm" style="color: var(--text-secondary);">TOTAL DEPOSITS</p><p class="${summaryTextClasses}">${formatCurrency(deposits)}</p></div>
                <div><p class="text-sm" style="color: var(--text-secondary);">TOTAL WITHDRAWN</p><p class="${summaryTextClasses}">${formatCurrency(withdrawals)}</p></div>
                <div><p class="text-sm" style="color: var(--text-secondary);">STARTING BALANCE</p><p class="${summaryTextClasses}">₹0.00</p></div>
            `;
            
            renderTopTrades();
            renderAllCharts();
        };
        
        // --- TRADE MANAGEMENT (NEW LAYOUT) ---
        const tradeForm = document.getElementById('manual-trade-form');
        const tradeFormInputs = ['asset-input', 'entry-date', 'entry-price', 'quantity', 'exit-date', 'exit-price', 'exit-quantity', 'stop-loss', 'target', 'brokerage', 'other-fees', 'strategy', 'outcome-summary', 'reasons'];
        
        const updateCalculations = () => {
            const entryPrice = parseFloat(document.getElementById('entry-price').value) || 0;
            const quantity = parseInt(document.getElementById('quantity').value, 10) || 0;
            const brokerage = parseFloat(document.getElementById('brokerage').value) || 0;
            const otherFees = parseFloat(document.getElementById('other-fees').value) || 0;

            const totalAmount = (entryPrice * quantity);
            document.getElementById('total-amount').textContent = formatCurrency(totalAmount);

            const exitPrice = parseFloat(document.getElementById('exit-price').value) || 0;
            const exitQuantity = parseInt(document.getElementById('exit-quantity').value, 10) || quantity;
            const direction = document.querySelector('#direction-group .active')?.dataset.value || 'Long';

            if (exitPrice > 0 && entryPrice > 0 && exitQuantity > 0) {
                const pnlAmount = (exitPrice - entryPrice) * exitQuantity * (direction === 'Short' ? -1 : 1);
                const pnlPercent = (pnlAmount / (entryPrice * exitQuantity)) * 100;
                
                const pnlAmountEl = document.getElementById('pnl-amount');
                pnlAmountEl.textContent = formatCurrency(pnlAmount);
                pnlAmountEl.className = `font-bold text-lg ${pnlAmount >= 0 ? 'text-green-500' : 'text-red-500'}`;
                
                const pnlPercentEl = document.getElementById('pnl-percent');
                pnlPercentEl.textContent = `${pnlPercent.toFixed(2)}%`;
                pnlPercentEl.className = `font-bold text-lg ${pnlPercent >= 0 ? 'text-green-500' : 'text-red-500'}`;

            } else {
                const pnlAmountEl = document.getElementById('pnl-amount');
                pnlAmountEl.textContent = formatCurrency(0);
                pnlAmountEl.className = `font-bold text-lg`;
                
                const pnlPercentEl = document.getElementById('pnl-percent');
                pnlPercentEl.textContent = '0.00%';
                pnlPercentEl.className = `font-bold text-lg`;
            }
        };
        
        tradeForm.addEventListener('input', (e) => {
            if (['entry-price', 'quantity', 'brokerage', 'other-fees', 'exit-price', 'exit-quantity'].includes(e.target.id)) {
                updateCalculations();
            }
        });
        
        document.querySelectorAll('.form-btn-group').forEach(group => {
            group.addEventListener('click', (e) => {
                const button = e.target.closest('button');
                if (button) {
                    group.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                     if(group.id === 'direction-group') { // Recalculate P&L if direction changes
                        updateCalculations();
                    }
                }
            });
        });
        
        const clearTradeForm = () => {
             tradeForm.reset();
             document.getElementById('trade-id').value = '';
             document.getElementById('trade-form-title').textContent = 'Add New Trade';
             document.querySelectorAll('.form-btn-group').forEach(group => {
                 group.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
                 // Set default active buttons
                 if (group.id === 'trading-style-group') group.querySelector('[data-value="Long-Term"]').classList.add('active');
                 if (group.id === 'segment-group') group.querySelector('[data-value="Currency"]').classList.add('active');
                 if (group.id === 'direction-group') group.querySelector('[data-value="Long"]').classList.add('active');
             });
             updateCalculations();
        };

        document.getElementById('asset-input').addEventListener('input', async (e) => {
            const query = e.target.value;
            const suggestionsEl = document.getElementById('asset-suggestions');
            if (query.length < 2) {
                suggestionsEl.classList.add('hidden');
                return;
            }

            // A mock asset suggestion list since we don't have a real API
            const allAssets = ["RELIANCE", "NIFTY", "HDFC", "INFY", "TCS", "ITC", "SBI", "ICICI"];
            const suggestions = allAssets.filter(asset => asset.toLowerCase().includes(query.toLowerCase()));

            if (suggestions.length > 0) {
                suggestionsEl.innerHTML = suggestions.map(s => `<div class="p-2 cursor-pointer" style="color: var(--text-primary); background-color: var(--bg-primary);">${s}</div>`).join('');
                suggestionsEl.classList.remove('hidden');
            } else {
                suggestionsEl.classList.add('hidden');
            }
        });

        document.getElementById('asset-suggestions').addEventListener('click', (e) => {
            const assetInput = document.getElementById('asset-input');
            assetInput.value = e.target.textContent;
            document.getElementById('asset-suggestions').classList.add('hidden');
        });

        tradeForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!appState.user) {
                showToast("You must be logged in.", "error");
                return;
            }

            const button = e.target.querySelector('button[type="submit"]');
            toggleSpinner(button, true);

            const tradeId = document.getElementById('trade-id').value;
            
            const tradeData = {
                // New Fields
                tradingStyle: document.querySelector('#trading-style-group .active')?.dataset.value,
                segment: document.querySelector('#segment-group .active')?.dataset.value,
                direction: document.querySelector('#direction-group .active')?.dataset.value,
                exitQuantity: document.getElementById('exit-quantity').value ? parseInt(document.getElementById('exit-quantity').value, 10) : null,
                pnlAmount: parseFloat(document.getElementById('pnl-amount').textContent.replace(/[₹,]/g, '')) || 0,
                pnlPercent: parseFloat(document.getElementById('pnl-percent').textContent.replace('%', '')) || 0,
                outcomeSummary: document.getElementById('outcome-summary').value,
                
                // Existing Fields (for backward compatibility and core logic)
                asset: document.getElementById('asset-input').value,
                entryDate: new Date(document.getElementById('entry-date').value),
                exitDate: document.getElementById('exit-date').value ? new Date(document.getElementById('exit-date').value) : null,
                entryPrice: parseFloat(document.getElementById('entry-price').value),
                exitPrice: document.getElementById('exit-price').value ? parseFloat(document.getElementById('exit-price').value) : null,
                quantity: parseInt(document.getElementById('quantity').value, 10),
                brokerage: document.getElementById('brokerage').value ? parseFloat(document.getElementById('brokerage').value) : 0,
                otherFees: document.getElementById('other-fees').value ? parseFloat(document.getElementById('other-fees').value) : 0,
                stopLoss: document.getElementById('stop-loss').value ? parseFloat(document.getElementById('stop-loss').value) : null,
                target: document.getElementById('target').value ? parseFloat(document.getElementById('target').value) : null,
                strategy: document.getElementById('strategy').value,
                reasons: document.getElementById('reasons').value,
                updatedAt: serverTimestamp(),
                
                // Keep tradeType for older reports if needed, can be inferred from tradingStyle
                tradeType: ['Scalping', 'Intraday'].includes(document.querySelector('#trading-style-group .active')?.dataset.value) ? 'Intraday' : 'Positional'
            };


            if (appState.challenge && appState.challenge.id) {
                tradeData.challengeId = appState.challenge.id;
            }

            try {
                const userId = appState.user.uid;
                if (tradeId) {
                    // Update existing trade
                    const tradeRef = doc(db, `artifacts/${appId}/users/${userId}/trades`, tradeId);
                    await updateDoc(tradeRef, tradeData);
                    showTradeSavedModal();
                } else {
                    // Add new trade
                    tradeData.createdAt = serverTimestamp();
                    const tradesRef = collection(db, `artifacts/${appId}/users/${userId}/trades`);
                    await addDoc(tradesRef, tradeData);
                    showTradeSavedModal();
                }
                clearTradeForm();
            } catch (error) {
                console.error("Error saving trade:", error);
                showToast(`Error saving trade: ${error.message}`, "error");
            } finally {
                toggleSpinner(button, false);
            }
        });
        
        document.getElementById('clear-trade-form-btn').addEventListener('click', clearTradeForm);

        const renderTradeHistory = () => {
            const tbody = document.getElementById('trade-history-tbody');
            if (!tbody) return;
            tbody.innerHTML = '';
            
            if (appState.trades.length === 0) {
                 tbody.innerHTML = `<tr><td colspan="11" class="text-center p-8" style="color: var(--text-muted);">No trades logged yet.</td></tr>`;
                 return;
            }

            appState.trades.forEach(trade => {
                const isClosed = trade.exitPrice && trade.exitDate;
                const pnl = isClosed ? calculateNetPnl(trade) : 0;
                const status = isClosed ? 'Closed' : 'Open';
                const statusColor = isClosed ? 'gray' : 'yellow';

                const row = document.createElement('tr');
                row.style.borderBottom = '1px solid var(--border-color)';
                row.innerHTML = `
                    <td class="px-6 py-4 font-semibold whitespace-nowrap">${trade.asset}</td>
                    <td class="px-6 py-4 font-semibold ${pnl > 0 ? 'text-green-500' : pnl < 0 ? 'text-red-500' : ''}">${isClosed ? formatCurrency(pnl) : '-'}</td>
                    <td class="px-6 py-4"><span class="bg-${statusColor}-100 text-${statusColor}-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full">${status}</span></td>
                    <td class="px-6 py-4">${formatCurrency(trade.entryPrice)}</td>
                    <td class="px-6 py-4">${trade.direction}</td>
                    <td class="px-6 py-4 whitespace-nowrap">${formatDate(trade.entryDate)}</td>
                    <td class="px-6 py-4 text-red-500">${trade.stopLoss ? formatCurrency(trade.stopLoss) : '-'}</td>
                    <td class="px-6 py-4">${trade.quantity}</td>
                    <td class="px-6 py-4">${trade.exitPrice ? formatCurrency(trade.exitPrice) : '-'}</td>
                    <td class="px-6 py-4 whitespace-nowrap">${formatDate(trade.exitDate)}</td>
                    <td class="px-6 py-4">
                        <div class="flex items-center space-x-2">
                            <button data-action="edit" data-id="${trade.id}" class="p-1 rounded-full hover:bg-slate-200" style="color: var(--text-primary);"><i data-feather="edit-2" class="h-4 w-4 pointer-events-none"></i></button>
                            <button data-action="delete" data-id="${trade.id}" class="p-1 rounded-full hover:bg-slate-200" style="color: var(--text-primary);"><i data-feather="trash-2" class="h-4 w-4 pointer-events-none text-red-500"></i></button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
            feather.replace();
        };

        document.getElementById('trade-history-tbody').addEventListener('click', async (e) => {
             const button = e.target.closest('button');
             if (!button || !appState.user) return;
             
             const action = button.dataset.action;
             const tradeId = button.dataset.id;
             const userId = appState.user.uid;
             
             if (action === 'edit') {
                 const trade = appState.trades.find(t => t.id === tradeId);
                 if (trade) {
                    clearTradeForm(); // Reset form to defaults first
                     document.getElementById('trade-id').value = trade.id;
                     document.getElementById('asset-input').value = trade.asset;
                     
                     // Set active buttons
                     if(trade.tradingStyle) document.querySelector(`#trading-style-group button[data-value="${trade.tradingStyle}"]`)?.classList.add('active');
                     if(trade.segment) document.querySelector(`#segment-group button[data-value="${trade.segment}"]`)?.classList.add('active');
                     if(trade.direction) document.querySelector(`#direction-group button[data-value="${trade.direction}"]`)?.classList.add('active');
                     
                     document.getElementById('entry-date').value = trade.entryDate.toDate().toISOString().slice(0, 16);
                     document.getElementById('exit-date').value = trade.exitDate ? trade.exitDate.toDate().toISOString().slice(0, 16) : '';
                     document.getElementById('entry-price').value = trade.entryPrice;
                     document.getElementById('exit-price').value = trade.exitPrice || '';
                     document.getElementById('quantity').value = trade.quantity;
                     document.getElementById('exit-quantity').value = trade.exitQuantity || trade.quantity;
                     document.getElementById('brokerage').value = trade.brokerage || '';
                     document.getElementById('other-fees').value = trade.otherFees || '';
                     document.getElementById('stop-loss').value = trade.stopLoss || '';
                     document.getElementById('target').value = trade.target || '';
                     document.getElementById('strategy').value = trade.strategy;
                     document.getElementById('outcome-summary').value = trade.outcomeSummary || 'Select Outcome Summary';
                     document.getElementById('reasons').value = trade.reasons || '';
                     
                     document.getElementById('trade-form-title').textContent = `Editing Trade: ${trade.asset}`;
                     updateCalculations();
                     navigateTo('add-trade');
                 }
             } else if (action === 'delete') {
                showConfirmationModal(
                    'Are you sure you want to delete this trade? This action cannot be undone.',
                    async () => {
                        try {
                            const tradeRef = doc(db, `artifacts/${appId}/users/${userId}/trades`, tradeId);
                            await deleteDoc(tradeRef);
                            showToast("Trade deleted successfully.", "success");
                        } catch (error) {
                            console.error("Error deleting trade:", error);
                            showToast("Failed to delete trade.", "error");
                        }
                    }
                );
             }
        });

        // --- FUND MANAGEMENT ---
        const transactionModal = document.getElementById('transaction-modal');
        const transactionForm = document.getElementById('transaction-form');

        const openTransactionModal = (type, ledgerEntry = null) => {
            transactionForm.reset();
            const title = document.getElementById('transaction-modal-title');
            const submitBtn = document.getElementById('transaction-submit-btn');
            document.getElementById('ledger-id').value = ledgerEntry ? ledgerEntry.id : '';

            if (type === 'Deposit') {
                title.textContent = 'Deposit Funds';
                submitBtn.querySelector('.btn-text').textContent = 'Add Deposit';
            } else {
                title.textContent = 'Withdraw Funds';
                submitBtn.querySelector('.btn-text').textContent = 'Add Withdrawal';
            }

            if(ledgerEntry) {
                document.getElementById('transaction-amount').value = ledgerEntry.amount;
                document.getElementById('transaction-date').valueAsDate = ledgerEntry.date.toDate();
                document.getElementById('transaction-notes').value = ledgerEntry.notes;
            } else {
                 document.getElementById('transaction-date').valueAsDate = new Date();
            }

            transactionModal.dataset.type = type;
            transactionModal.classList.remove('hidden');
        };

        document.getElementById('fm-deposit-btn')?.addEventListener('click', () => openTransactionModal('Deposit'));
        document.getElementById('fm-withdraw-btn')?.addEventListener('click', () => openTransactionModal('Withdrawal'));

        document.querySelectorAll('.close-modal-btn').forEach(btn => {
            btn.addEventListener('click', () => btn.closest('.modal-overlay').classList.add('hidden'));
        });
        
        transactionForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!appState.user) {
                showToast("You must be logged in.", "error");
                return;
            }
            
            const button = e.target.querySelector('button[type="submit"]');
            toggleSpinner(button, true);

            const ledgerId = document.getElementById('ledger-id').value;
            const data = {
                type: transactionModal.dataset.type,
                amount: parseFloat(document.getElementById('transaction-amount').value),
                date: new Date(document.getElementById('transaction-date').value),
                notes: document.getElementById('transaction-notes').value,
                updatedAt: serverTimestamp()
            };

            try {
                const userId = appState.user.uid;
                if (ledgerId) {
                    const docRef = doc(db, `artifacts/${appId}/users/${userId}/ledger`, ledgerId);
                    await updateDoc(docRef, data);
                    showToast("Transaction updated successfully!", "success");
                } else {
                    data.createdAt = serverTimestamp();
                    const collectionRef = collection(db, `artifacts/${appId}/users/${userId}/ledger`);
                    await addDoc(collectionRef, data);
                    showToast(`${data.type} added successfully!`, "success");
                }
                transactionModal.classList.add('hidden');
            } catch(error) {
                console.error("Error saving transaction: ", error);
                showToast("Failed to save transaction.", "error");
            } finally {
                toggleSpinner(button, false);
            }
        });

        const renderFundManagement = () => {
             const { ledger, trades } = appState;
             const deposits = ledger.filter(l => l.type === 'Deposit').reduce((sum, l) => sum + l.amount, 0);
             const withdrawals = ledger.filter(l => l.type === 'Withdrawal').reduce((sum, l) => sum + l.amount, 0);
             const netPnl = trades.filter(t => t.exitPrice).reduce((sum, t) => sum + calculateNetPnl(t), 0);

            const accountValue = deposits - withdrawals + netPnl;
            const deployedCapital = trades.filter(t => !t.exitDate).reduce((sum, t) => sum + (t.entryPrice * t.quantity), 0);
            const availableCash = accountValue - deployedCapital;

            const statsGrid = document.getElementById('fm-stats-grid');
            const statTextClasses = "text-2xl font-bold mt-2";
            statsGrid.innerHTML = `
                <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"><h3 class="text-sm font-medium" style="color: var(--text-secondary);">Net Account Value</h3><p class="${statTextClasses} ${accountValue >=0 ? 'text-green-500' : 'text-red-500'}">${formatCurrency(accountValue)}</p></div>
                <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"><h3 class="text-sm font-medium" style="color: var(--text-secondary);">Net Realised P&L</h3><p class="${statTextClasses} ${netPnl >=0 ? 'text-green-500' : 'text-red-500'}">${formatCurrency(netPnl)}</p></div>
                <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"><h3 class="text-sm font-medium" style="color: var(--text-secondary);">Total Deposits</h3><p class="${statTextClasses}">${formatCurrency(deposits)}</p></div>
                <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"><h3 class="text-sm font-medium" style="color: var(--text-secondary);">Total Withdrawn</h3><p class="${statTextClasses}">${formatCurrency(withdrawals)}</p></div>
                <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"><h3 class="text-sm font-medium" style="color: var(--text-secondary);">Deployed Capital</h3><p class="${statTextClasses}">${formatCurrency(deployedCapital)}</p></div>
                <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"><h3 class="text-sm font-medium" style="color: var(--text-secondary);">Available Cash</h3><p class="${statTextClasses}">${formatCurrency(availableCash)}</p></div>
            `;
            
            const tbody = document.getElementById('fund-ledger-body');
            tbody.innerHTML = '';
            if (ledger.length === 0) {
                 tbody.innerHTML = `<tr><td colspan="5" class="text-center p-8" style="color: var(--text-muted);">No transactions yet.</td></tr>`;
                 return;
            }
            ledger.forEach(entry => {
                const isDeposit = entry.type === 'Deposit';
                const row = document.createElement('tr');
                row.style.borderBottom = '1px solid var(--border-color)';
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">${formatDate(entry.date)}</td>
                    <td class="px-6 py-4"><span class="text-xs font-medium px-2.5 py-0.5 rounded-full ${isDeposit ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">${entry.type}</span></td>
                    <td class="px-6 py-4 font-semibold ${isDeposit ? 'text-green-500' : 'text-red-500'}">${formatCurrency(entry.amount)}</td>
                    <td class="px-6 py-4 text-xs">${entry.notes || '-'}</td>
                    <td class="px-6 py-4 flex items-center space-x-2">
                        <button data-action="edit" data-id="${entry.id}" class="p-1 hover:bg-slate-200" style="color: var(--text-primary);"><i data-feather="edit-2" class="h-4 w-4 pointer-events-none"></i></button>
                        <button data-action="delete" data-id="${entry.id}" class="p-1 hover:bg-slate-200" style="color: var(--text-primary);"><i data-feather="trash-2" class="h-4 w-4 pointer-events-none"></i></button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            feather.replace();
        };

        document.getElementById('fund-ledger-body').addEventListener('click', async (e) => {
            const button = e.target.closest('button');
            if (!button || !appState.user) return;
            
            const action = button.dataset.action;
            const ledgerId = button.dataset.id;
            const userId = appState.user.uid;
            
            if (action === 'edit') {
                const entry = appState.ledger.find(l => l.id === ledgerId);
                if (entry) {
                    openTransactionModal(entry.type, entry);
                }
            } else if (action === 'delete') {
                showConfirmationModal(
                    'Are you sure you want to delete this transaction?',
                    async () => {
                        try {
                            const docRef = doc(db, `artifacts/${appId}/users/${userId}/ledger`, ledgerId);
                            await deleteDoc(docRef);
                            showToast("Transaction deleted.", "success");
                        } catch (error) {
                            showToast("Failed to delete transaction.", "error");
                        }
                    },
                    "Delete Transaction"
                );
            }
        });
        
        // --- TRADE CALENDAR ---
        const tradeDetailsModal = document.getElementById('trade-details-modal');

        const openTradeDetailsModal = (year, month, day) => {
            const date = new Date(year, month, day);
            const tradesForDay = appState.trades.filter(t => {
                if (!t.exitDate) return false;
                const exitDate = t.exitDate.toDate();
                return exitDate.getFullYear() == year && exitDate.getMonth() == month && exitDate.getDate() == day;
            });

            if(tradesForDay.length === 0) return;

            // Calculations
            const totalPnl = tradesForDay.reduce((sum, t) => sum + calculateNetPnl(t), 0);
            const winningTrades = tradesForDay.filter(t => calculateNetPnl(t) > 0);
            const winRate = (winningTrades.length / tradesForDay.length) * 100;

            let totalRR = 0;
            let rrCount = 0;
            tradesForDay.forEach(t => {
                if(t.target && t.stopLoss && t.entryPrice) {
                    const potentialReward = Math.abs(t.target - t.entryPrice);
                    const potentialRisk = Math.abs(t.entryPrice - t.stopLoss);
                    if(potentialRisk > 0) {
                        totalRR += potentialReward / potentialRisk;
                        rrCount++;
                    }
                }
            });
            const avgRR = rrCount > 0 ? (totalRR / rrCount).toFixed(2) : 'N/A';
            
            // Update Modal DOM
            document.getElementById('modal-date').textContent = formatDate(date);
            const pnlEl = document.getElementById('modal-total-pnl');
            pnlEl.textContent = formatCurrency(totalPnl);
            pnlEl.style.color = totalPnl >= 0 ? '#22c55e' : '#ef4444';

            document.getElementById('modal-avg-rr').textContent = avgRR === 'N/A' ? 'N/A' : `1:${avgRR}`;
            document.getElementById('modal-total-trades').textContent = tradesForDay.length;
            document.getElementById('modal-win-rate').textContent = `${winRate.toFixed(1)}%`;
            
            const tbody = document.getElementById('modal-trades-tbody');
            tbody.innerHTML = tradesForDay.map(trade => {
                const pnl = calculateNetPnl(trade);
                return `
                    <tr>
                        <td class="font-semibold">${trade.asset}</td>
                        <td style="color: ${trade.direction === 'Long' ? '#22c55e' : '#ef4444'}">${trade.direction}</td>
                        <td>${trade.quantity}</td>
                        <td>${formatCurrency(trade.entryPrice)}</td>
                        <td>${formatCurrency(trade.exitPrice)}</td>
                        <td style="color: ${pnl >= 0 ? '#22c55e' : '#ef4444'}">${formatCurrency(pnl)}</td>
                    </tr>
                `;
            }).join('');


            tradeDetailsModal.style.display = 'block';
            feather.replace();
        };

        document.getElementById('calendar-grid-days').addEventListener('click', (e) => {
            const dateBox = e.target.closest('.date-box.has-trades');
            if (dateBox) {
                const { day, month, year } = dateBox.dataset;
                openTradeDetailsModal(year, month, day);
            }
        });
        
        tradeDetailsModal.querySelector('.close-btn').addEventListener('click', () => {
            tradeDetailsModal.style.display = 'none';
        });

        window.addEventListener('click', (e) => {
            if(e.target === tradeDetailsModal) {
                 tradeDetailsModal.style.display = 'none';
            }
        });


        const renderCalendar = () => {
            const calendarDaysGrid = document.getElementById('calendar-grid-days');
            const calendarSummariesGrid = document.getElementById('calendar-grid-summaries');
            const monthYearEl = document.getElementById('calendar-month-year');
            const monthlyPnlDisplay = document.getElementById('monthly-pnl-display');
            if (!calendarDaysGrid || !calendarSummariesGrid || !monthYearEl) return;

            const date = appState.calendarDate;
            const year = date.getFullYear();
            const month = date.getMonth();
            monthYearEl.textContent = date.toLocaleString('default', { month: 'long', year: 'numeric' });
            
            // 1. Aggregate trade data for the current month
            const tradesByDate = {};
            const tradesThisMonth = appState.trades.filter(t => {
                if (!t.exitDate) return false;
                const exitDate = t.exitDate.toDate();
                return exitDate.getFullYear() === year && exitDate.getMonth() === month;
            });

            tradesThisMonth.forEach(t => {
                const day = t.exitDate.toDate().getDate();
                const pnl = calculateNetPnl(t);
                if (!tradesByDate[day]) {
                    tradesByDate[day] = { pnl: 0, trades: 0 };
                }
                tradesByDate[day].pnl += pnl;
                tradesByDate[day].trades++;
            });

            // 2. Render monthly stat cards
            const statsGrid = document.getElementById('calendar-stats-grid');
            if (statsGrid) {
                const totalTrades = tradesThisMonth.length;
                const netPnl = tradesThisMonth.reduce((sum, t) => sum + calculateNetPnl(t), 0);
                const wins = tradesThisMonth.filter(t => calculateNetPnl(t) > 0).length;
                const winRate = totalTrades > 0 ? (wins / totalTrades) * 100 : 0;
                
                let bestDayPnl = 0;
                let bestDayDate = null;
                for(const day in tradesByDate) {
                    if(tradesByDate[day].pnl > bestDayPnl) {
                        bestDayPnl = tradesByDate[day].pnl;
                        bestDayDate = day;
                    }
                }

                statsGrid.innerHTML = `
                    <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"><h3 class="text-sm font-medium" style="color: var(--text-secondary);">Total Trades</h3><p class="text-2xl font-bold mt-2" style="color: var(--text-primary);">${totalTrades}</p></div>
                    <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"><h3 class="text-sm font-medium" style="color: var(--text-secondary);">Net P&L</h3><p class="text-2xl font-bold mt-2 ${netPnl >= 0 ? 'text-green-500' : 'text-red-500'}">${formatCurrency(netPnl)}</p></div>
                    <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"><h3 class="text-sm font-medium" style="color: var(--text-secondary);">Win Rate</h3><p class="text-2xl font-bold mt-2" style="color: var(--text-primary);">${winRate.toFixed(1)}%</p></div>
                    <div class="p-5 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);"><h3 class="text-sm font-medium" style="color: var(--text-secondary);">Best Day</h3><p class="text-2xl font-bold text-green-500 mt-2">${formatCurrency(bestDayPnl)}</p>${bestDayDate ? `<p class="text-xs" style="color: var(--text-muted);">${new Date(year, month, bestDayDate).toLocaleString('default', { month: 'short' })} ${bestDayDate}</p>` : ''}</div>
                `;
            }

            // 3. Build calendar grid cells data
            const firstDayOfMonth = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();
            const daysInPrevMonth = new Date(year, month, 0).getDate();
            
            let calendarCells = [];
            for (let i = firstDayOfMonth; i > 0; i--) {
                calendarCells.push({ day: daysInPrevMonth - i + 1, isCurrentMonth: false });
            }
            for (let i = 1; i <= daysInMonth; i++) {
                calendarCells.push({ day: i, isCurrentMonth: true, data: tradesByDate[i] || { pnl: 0, trades: 0 } });
            }
            
            while (calendarCells.length % 7 !== 0) {
                 calendarCells.push({ day: calendarCells.length - daysInMonth - firstDayOfMonth + 1, isCurrentMonth: false });
            }

            // 4. Render new calendar layout
            calendarDaysGrid.innerHTML = '';
            calendarSummariesGrid.innerHTML = '';
            let monthlyPnl = 0;
            const weeks = [];
            for (let i = 0; i < calendarCells.length; i += 7) {
                weeks.push(calendarCells.slice(i, i + 7));
            }

            weeks.forEach((week, weekIndex) => {
                let weeklyPnl = 0;
                let daysTraded = 0;
                
                const weekRow = document.createElement('div');
                weekRow.className = 'grid grid-cols-7 gap-2 mb-2';

                week.forEach(cell => {
                    if (cell.isCurrentMonth) {
                        weeklyPnl += cell.data.pnl;
                        if(cell.data.trades > 0) {
                            daysTraded++;
                        }
                    }

                    let dayHtml = '';
                    if (cell.isCurrentMonth) {
                         monthlyPnl += cell.data.pnl;
                         const pnl = cell.data.pnl;
                         const trades = cell.data.trades;
                        
                        const openingBalanceForDay = appState.accountValue - pnl;
                        const percentage = openingBalanceForDay !== 0 ? ((pnl / openingBalanceForDay) * 100).toFixed(2) : "0.00";
                        const pnlText = `${pnl >= 0 ? '+' : ''}${formatCurrency(pnl)} (${percentage}%)`;
                         
                         const bgClass = pnl > 0 ? 'bg-green-100 dark:bg-green-800/30' : pnl < 0 ? 'bg-red-100 dark:bg-red-800/30' : 'bg-gray-50 dark:bg-gray-800/50';
                         const hasTradesClass = trades > 0 ? 'has-trades' : '';

                        dayHtml = `
                            <div class="date-box rounded-lg p-2 ${bgClass} ${hasTradesClass} min-h-[110px] flex flex-col justify-between" 
                                 data-day="${cell.day}" data-month="${month}" data-year="${year}">
                                <div class="flex justify-between items-start">
                                    <span class="date-number">${String(cell.day).padStart(2, '0')}</span>
                                    ${trades > 0 ? `<span class="text-xs text-white px-1.5 py-0.5 rounded-full bg-blue-500 shadow">${trades}</span>` : ''}
                                </div>
                                ${trades > 0 ? `
                                <div class="text-right">
                                    <span class="pl-amount ${pnl > 0 ? 'profit' : (pnl < 0 ? 'loss' : '')}">${pnlText}</span>
                                </div>
                                ` : ''}
                            </div>
                        `;
                    } else {
                         dayHtml = `<div class="date-box rounded-lg bg-gray-100/50 dark:bg-gray-800/20 min-h-[110px]"></div>`;
                    }
                    const dayWrapper = document.createElement('div');
                    dayWrapper.innerHTML = dayHtml;
                    weekRow.appendChild(dayWrapper);
                });
                
                calendarDaysGrid.appendChild(weekRow);
                
                // Weekly summary
                const weeklyPnlColor = weeklyPnl > 0 ? 'text-green-600 dark:text-green-400' : weeklyPnl < 0 ? 'text-red-600 dark:text-red-400' : 'text-gray-500';
                
                const weeklyBgClass = weeklyPnl > 0 ? 'bg-green-100 dark:bg-green-900/30' : weeklyPnl < 0 ? 'bg-red-100 dark:bg-red-900/30' : 'bg-gray-50 dark:bg-gray-800/50';

                const weeklyPnlString = formatCurrency(weeklyPnl);
                let fontSizeClass = 'text-xl'; // Default size
                if (weeklyPnlString.length > 13) {
                    fontSizeClass = 'text-base'; // For tens of lakhs and crores
                } else if (weeklyPnlString.length > 10) {
                    fontSizeClass = 'text-lg'; // For lakhs
                }

                const summaryDiv = document.createElement('div');
                summaryDiv.className = `week-summary w-full flex-shrink-0 rounded-lg p-3 flex flex-col justify-center text-center min-h-[110px] ${weeklyBgClass}`;
                summaryDiv.innerHTML = `
                    <p class="week-label">Week ${weekIndex + 1}</p>
                    <p class="font-bold ${fontSizeClass} my-1 ${weeklyPnlColor}">${weeklyPnlString}</p>
                    <p class="text-xs px-2 py-0.5 rounded-full bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-200 inline-block mx-auto">${daysTraded} day${daysTraded === 1 ? '' : 's'}</p>
                `;
                calendarSummariesGrid.appendChild(summaryDiv);
            });
            
            monthlyPnlDisplay.textContent = `Monthly P&L: ${formatCurrency(monthlyPnl)}`;
            monthlyPnlDisplay.className = `font-semibold ${monthlyPnl > 0 ? 'text-green-500' : monthlyPnl < 0 ? 'text-red-500' : ''}`;
            feather.replace();
        };
            
        document.getElementById('prev-month-btn')?.addEventListener('click', () => {
            appState.calendarDate.setMonth(appState.calendarDate.getMonth() - 1);
            renderCalendar();
        });
        document.getElementById('next-month-btn')?.addEventListener('click', () => {
            appState.calendarDate.setMonth(appState.calendarDate.getMonth() + 1);
            renderCalendar();
        });

        // --- PROFILE MANAGEMENT ---
        const renderProfilePage = (profileData) => {
            if (!appState.user) return;
            document.getElementById('profile-name').value = profileData.name || '';
            document.getElementById('profile-email').value = appState.user.email || '';
            document.getElementById('profile-phone').value = profileData.phone || '';
            document.getElementById('profile-city').value = profileData.city || '';
            document.getElementById('profile-member-since').textContent = profileData.createdAt ? formatDate(profileData.createdAt) : 'N/A';
        };
        
        document.getElementById('profile-info-form').addEventListener('submit', async (e) => {
             e.preventDefault();
             if (!appState.user) {
                showToast("You must be logged in.", "error");
                return;
             }
             const button = e.target.querySelector('button[type="submit"]');
             toggleSpinner(button, true);

             const profileData = {
                 name: document.getElementById('profile-name').value,
                 phone: document.getElementById('profile-phone').value,
                 city: document.getElementById('profile-city').value,
             };
             
             try {
                 await updateProfile(auth.currentUser, { displayName: profileData.name });
                 const profileRef = doc(db, `artifacts/${appId}/users/${appState.user.uid}/profile`, 'info');
                 await setDoc(profileRef, profileData, { merge: true });
                 document.getElementById('user-display-name').textContent = profileData.name;
                 showToast("Profile updated successfully!", "success");
             } catch (error) {
                 showToast("Error updating profile.", "error");
             } finally {
                toggleSpinner(button, false);
             }
        });
        
        // --- REPORTS PAGE ---
        const renderReports = () => {
            const container = document.getElementById('reports-metrics-grid');
            if(!container) return;
            const { trades } = appState;
            const closedTrades = trades.filter(t => t.exitPrice && t.exitDate);
            if (closedTrades.length === 0) {
                 container.innerHTML = `<p class="md:col-span-2 text-center p-8" style="color: var(--text-muted);">No closed trades to generate a report.</p>`;
                 return;
            }

            const tradePnls = closedTrades.map(t => calculateNetPnl(t));
            const winningTrades = tradePnls.filter(pnl => pnl > 0);
            const losingTrades = tradePnls.filter(pnl => pnl < 0);
            
            const metrics = {
                'Best Trade': Math.max(...tradePnls),
                'Worst Trade': Math.min(...tradePnls),
                'Average Winning Trade': winningTrades.length ? winningTrades.reduce((a, b) => a + b, 0) / winningTrades.length : 0,
                'Average Losing Trade': losingTrades.length ? losingTrades.reduce((a, b) => a + b, 0) / losingTrades.length : 0,
                'Number of Winning Trades': winningTrades.length,
                'Number of Losing Trades': losingTrades.length,
            };
            
            let html = '';
            for (const [key, value] of Object.entries(metrics)) {
                let valueColor = '';
                if (key.includes('Best') || key.includes('Winning')) valueColor = 'text-green-500';
                if (key.includes('Worst') || key.includes('Losing')) valueColor = 'text-red-500';

                html += `
                    <div class="flex justify-between border-b py-2" style="border-color: var(--border-color);">
                        <span style="color: var(--text-secondary);">${key}</span>
                        <span class="font-semibold ${valueColor}">${typeof value === 'number' && key !== 'Number of Winning Trades' && key !== 'Number of Losing Trades' ? formatCurrency(value) : value}</span>
                    </div>
                `;
            }
            container.innerHTML = html;
        };
        
        // --- TRADE STATEMENT ---
        const renderStatement = () => {
            const tbody = document.getElementById('statement-tbody');
            if (!tbody) return;

            const combined = [
                ...appState.trades.filter(t => t.exitDate).map(t => ({...t, type: 'Trade', date: t.exitDate})),
                ...appState.ledger.map(l => ({...l, type: l.type, date: l.date}))
            ];

            combined.sort((a, b) => b.date.toDate() - a.date.toDate());

            tbody.innerHTML = '';
            if (combined.length === 0) {
                 tbody.innerHTML = `<tr><td colspan="9" class="text-center p-8" style="color: var(--text-muted);">No transactions to display.</td></tr>`;
                 return;
            }

            combined.forEach(item => {
                const row = document.createElement('tr');
                row.style.borderBottom = '1px solid var(--border-color)';
                
                let rowHtml = '';
                if(item.type === 'Trade') {
                    const grossPnl = (item.exitPrice - item.entryPrice) * item.quantity * (item.direction === 'Short' ? -1 : 1);
                    const charges = (item.brokerage || 0) + (item.otherFees || 0);
                    const netPnl = grossPnl - charges;

                    row.dataset.type = 'trade';
                    row.dataset.strategy = item.strategy;
                    rowHtml = `
                        <td class="px-6 py-4 whitespace-nowrap">${formatDate(item.date)}</td>
                        <td class="px-6 py-4 font-medium">${item.tradeType} (${item.direction})</td>
                        <td class="px-6 py-4 font-semibold">${item.asset}</td>
                        <td class="px-6 py-4">${item.strategy}</td>
                        <td class="px-6 py-4 font-semibold ${grossPnl >= 0 ? 'text-green-500' : 'text-red-500'}">${formatCurrency(grossPnl)}</td>
                        <td class="px-6 py-4 text-red-500">${formatCurrency(charges)}</td>
                        <td class="px-6 py-4 font-semibold ${netPnl >= 0 ? 'text-green-500' : 'text-red-500'}">${formatCurrency(netPnl)}</td>
                        <td class="px-6 py-4">-</td>
                        <td class="px-6 py-4 text-xs" style="color: var(--text-muted);">${item.reasons || '-'}</td>
                    `;
                } else { // Deposit or Withdrawal
                    row.dataset.type = item.type.toLowerCase();
                    row.dataset.strategy = 'N/A';
                    const isDeposit = item.type === 'Deposit';
                    if (isDeposit) {
                        row.style.backgroundColor = 'color-mix(in srgb, #22c55e 10%, var(--bg-primary))';
                    } else {
                        row.style.backgroundColor = 'color-mix(in srgb, #ef4444 10%, var(--bg-primary))';
                    }

                    rowHtml = `
                        <td class="px-6 py-4 whitespace-nowrap">${formatDate(item.date)}</td>
                        <td class="px-6 py-4 font-medium ${isDeposit ? 'text-green-600' : 'text-red-600'}">${item.type}</td>
                        <td class="px-6 py-4">Fund Transaction</td>
                        <td class="px-6 py-4">-</td>
                        <td class="px-6 py-4">-</td>
                        <td class="px-6 py-4">-</td>
                        <td class="px-6 py-4">-</td>
                        <td class="px-6 py-4 font-semibold ${isDeposit ? 'text-green-600' : 'text-red-600'}">${isDeposit ? '+' : '-'}${formatCurrency(item.amount)}</td>
                        <td class="px-6 py-4 text-xs" style="color: var(--text-muted);">${item.notes || '-'}</td>
                    `;
                }
                row.dataset.date = item.date.toDate().toISOString().split('T')[0];
                row.innerHTML = rowHtml;
                tbody.appendChild(row);
            });
        };
        
        const applyStatementFilters = () => {
            const typeFilter = document.getElementById('filter-type').value.toLowerCase();
            const strategyFilter = document.getElementById('filter-strategy').value;
            const startDateFilter = document.getElementById('filter-start-date').value;
            const endDateFilter = document.getElementById('filter-end-date').value;

            const rows = document.querySelectorAll('#statement-tbody tr');

            rows.forEach(row => {
                const rowType = row.dataset.type;
                const rowStrategy = row.dataset.strategy;
                const rowDate = row.dataset.date;

                let show = true;

                if (typeFilter !== 'all types' && rowType !== typeFilter.replace(' ', '')) {
                    show = false;
                }
                if (strategyFilter !== 'All Strategies' && rowStrategy !== strategyFilter) {
                    show = false;
                }
                if (startDateFilter && rowDate < startDateFilter) {
                    show = false;
                }
                if (endDateFilter && rowDate > endDateFilter) {
                    show = false;
                }

                row.style.display = show ? '' : 'none';
            });
        };

        document.getElementById('apply-filter-btn').addEventListener('click', applyStatementFilters);
        document.getElementById('reset-filter-btn').addEventListener('click', () => {
            document.getElementById('filter-type').value = 'All Types';
            document.getElementById('filter-strategy').value = 'All Strategies';
            document.getElementById('filter-start-date').value = '';
            document.getElementById('filter-end-date').value = '';
            applyStatementFilters(); // Re-apply to show all
        });
        
        // --- CHALLENGE PAGE ---
        const challengeModal = document.getElementById('challenge-modal');
        const challengeForm = document.getElementById('challenge-form');

        document.querySelectorAll('#set-challenge-btn, #set-challenge-btn-inactive').forEach(btn => {
            btn.addEventListener('click', () => {
                challengeModal.classList.remove('hidden');
                challengeForm.reset();
            });
        });

        challengeModal.querySelector('.close-modal-btn').addEventListener('click', () => {
            challengeModal.classList.add('hidden');
        });

        challengeForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!appState.user) return;

            const button = e.target.querySelector('button[type="submit"]');
            toggleSpinner(button, true);

            const challengeData = {
                startingCapital: parseFloat(document.getElementById('starting-capital').value),
                targetCapital: parseFloat(document.getElementById('target-capital').value),
                timeframe: parseInt(document.getElementById('timeframe').value),
                maxRisk: parseFloat(document.getElementById('max-risk').value),
                createdAt: serverTimestamp(),
                status: 'active'
            };
            
            try {
                const userId = appState.user.uid;
                const challengesRef = collection(db, `artifacts/${appId}/users/${userId}/challenges`);

                const q = query(challengesRef, where("status", "==", "active"));
                const activeChallengeSnap = await getDocs(q);

                if (!activeChallengeSnap.empty) {
                    showToast("An active challenge already exists. Please complete it first.", "error");
                    toggleSpinner(button, false);
                    return;
                }

                await addDoc(challengesRef, challengeData);
                showToast("Challenge set successfully!", "success");
                challengeModal.classList.add('hidden');
            } catch(error) {
                console.error("Error setting challenge:", error);
                showToast("Failed to set challenge.", "error");
            } finally {
                toggleSpinner(button, false);
            }
        });

        let challengeChart = null;

        const determineBadgeType = (stats) => {
            const profit = stats.finalCapital - appState.challenge.startingCapital;
            if (profit >= 50000) return "Gold Trader";
            if (profit >= 25000) return "Silver Trader";
            return "Bronze Trader";
        };

        const completeChallenge = async (status, finalStats) => {
            if (!appState.user || !appState.challenge) return;
            const userId = appState.user.uid;
            const challengeId = appState.challenge.id;

            const batch = writeBatch(db);

            // 1. Update the challenge document status and stats
            const challengeRef = doc(db, `artifacts/${appId}/users/${userId}/challenges`, challengeId);
            const updateData = {
                ...finalStats,
                status: status,
                completedAt: serverTimestamp()
            };
            batch.update(challengeRef, updateData);

            // 2. Award achievement badge if completed successfully
            if (status === 'completed') {
                const achievementRef = collection(db, `artifacts/${appId}/users/${userId}/achievements`);
                const newAchievementDocRef = doc(achievementRef);
                const badgeType = determineBadgeType(finalStats);
                batch.set(newAchievementDocRef, {
                    badge: badgeType,
                    challengeId: challengeId,
                    challengeDetails: `Target: ${formatCurrency(appState.challenge.targetCapital)} in ${appState.challenge.timeframe} days.`,
                    awardedAt: serverTimestamp()
                });
            }

            try {
                await batch.commit();
                const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);
                showToast(`Challenge ${displayStatus}!`, status === 'completed' ? 'success' : 'info');
            } catch (error) {
                console.error("Error completing challenge: ", error);
                showToast("Error updating challenge status.", "error");
            }
        };


        const renderChallenge = () => {
            const { challenge, trades, ledger } = appState;
            const activeContainer = document.getElementById('challenge-active-container');
            const inactiveContainer = document.getElementById('challenge-inactive-container');
            const activeWrapper = document.getElementById('challenge-active-wrapper');
            
            if (!activeContainer || !inactiveContainer || !activeWrapper) return;

            // Wait until the challenge and its server-generated timestamp are available
            // This prevents calculating progress with stale or incomplete data from a previous challenge.
            if (!challenge || !challenge.createdAt) {
                activeWrapper.classList.add('hidden');
                inactiveContainer.classList.remove('hidden');
                return;
            }

            activeWrapper.classList.remove('hidden');
            activeContainer.classList.remove('hidden');
            inactiveContainer.classList.add('hidden');
            
            // --- Date Calculations ---
            const now = new Date();
            const challengeStartDate = challenge.createdAt.toDate(); // No longer need a fallback
            
            const calendarDaysForEndDate = challenge.timeframe;
            let tempEndDate = new Date(challengeStartDate);
            let tradingDaysCounted = 0;
            while(tradingDaysCounted < calendarDaysForEndDate){
                tempEndDate.setDate(tempEndDate.getDate() + 1);
                const dayOfWeek = tempEndDate.getDay();
                if(dayOfWeek !== 0 && dayOfWeek !== 6){
                    tradingDaysCounted++;
                }
            }
            const challengeEndDate = tempEndDate;


            const tradingDaysPassed = countTradingDays(challengeStartDate, now);
            const totalTradingDays = countTradingDays(challengeStartDate, challengeEndDate);
            const daysRemaining = Math.max(0, totalTradingDays - tradingDaysPassed);

            // --- Filter Data for Challenge Period ---
            const challengeTrades = trades
                .filter(t => t.challengeId === challenge.id && t.exitDate)
                .sort((a, b) => a.exitDate.toDate() - b.exitDate.toDate());

            // --- Core Metric Calculations ---
            const netPnl = challengeTrades.reduce((sum, t) => sum + calculateNetPnl(t), 0);
            const currentCapital = challenge.startingCapital + netPnl;
            const profitNeeded = challenge.targetCapital - challenge.startingCapital;
            const profitMade = currentCapital - challenge.startingCapital;
            const progress = profitNeeded > 0 ? Math.max(0, Math.min(100, (profitMade / profitNeeded) * 100)) : 100;
            
            const dailyTarget = daysRemaining > 0 ? (challenge.targetCapital - currentCapital) / daysRemaining : 0;
            
            // --- Performance Metrics ---
            const wins = challengeTrades.filter(t => calculateNetPnl(t) > 0).length;
            const winRate = challengeTrades.length > 0 ? (wins / challengeTrades.length) * 100 : 0;

            const winningTradesPnl = challengeTrades.filter(t => calculateNetPnl(t) > 0).map(t => calculateNetPnl(t));
            const losingTradesPnl = challengeTrades.filter(t => calculateNetPnl(t) < 0).map(t => Math.abs(calculateNetPnl(t)));
            const avgWin = winningTradesPnl.length > 0 ? winningTradesPnl.reduce((sum, p) => sum + p, 0) / winningTradesPnl.length : 0;
            const avgLoss = losingTradesPnl.length > 0 ? losingTradesPnl.reduce((sum, p) => sum + p, 0) / losingTradesPnl.length : 0;
            const avgRR = avgLoss > 0 ? (avgWin / avgLoss).toFixed(2) : '0';

            // --- Advanced Metrics: Max Drawdown & Highest Profit Day ---
            let maxDrawdown = 0;
            let peakCapital = challenge.startingCapital;
            let runningCapital = challenge.startingCapital;
            const pnlByDay = {};

            challengeTrades.forEach(trade => {
                const pnl = calculateNetPnl(trade);
                runningCapital += pnl;
                if (runningCapital > peakCapital) {
                    peakCapital = runningCapital;
                }
                const drawdown = peakCapital > 0 ? ((peakCapital - runningCapital) / peakCapital) * 100 : 0;
                if (drawdown > maxDrawdown) {
                    maxDrawdown = drawdown;
                }
                const dateKey = trade.exitDate.toDate().toISOString().split('T')[0];
                if(!pnlByDay[dateKey]) pnlByDay[dateKey] = 0;
                pnlByDay[dateKey] += pnl;
            });
            const highestProfitDay = Object.values(pnlByDay).length > 0 ? Math.max(0, ...Object.values(pnlByDay)) : 0;

            // --- Check for challenge completion or failure ---
            const finalStats = {
                finalCapital: currentCapital,
                daysTaken: tradingDaysPassed,
                finalWinRate: winRate,
                finalAvgRR: avgRR,
                finalMaxDrawdown: maxDrawdown,
                highestProfit: highestProfitDay
            };

            if (challenge.status === 'active' && currentCapital >= challenge.targetCapital) {
                completeChallenge('completed', finalStats);
                return; // Stop rendering the active view to avoid flicker
            }

            if (challenge.status === 'active' && now > challengeEndDate) {
                completeChallenge('failed', finalStats);
                return; // Stop rendering the active view to avoid flicker
            }


            // --- Update UI ---
            document.getElementById('challenge-days-remaining').textContent = daysRemaining;
            document.getElementById('challenge-end-date').textContent = `End Date: ${formatDate(challengeEndDate)}`;
            document.getElementById('challenge-current-capital').textContent = formatCurrency(currentCapital);
            document.getElementById('challenge-current-capital').className = `text-2xl font-bold mt-2 ${currentCapital >= challenge.startingCapital ? 'text-green-500' : 'text-red-500'}`;
            document.getElementById('challenge-target-capital').textContent = `Target: ${formatCurrency(challenge.targetCapital)}`;
            document.getElementById('challenge-daily-target').textContent = formatCurrency(dailyTarget);
            document.getElementById('challenge-win-rate').textContent = `${winRate.toFixed(2)}%`;
            document.getElementById('challenge-progress-percent').textContent = `${progress.toFixed(1)}%`;
            document.getElementById('challenge-avg-rr').textContent = `1:${avgRR}`;
            document.getElementById('challenge-highest-profit').textContent = formatCurrency(highestProfitDay);
            document.getElementById('challenge-max-drawdown').textContent = `${maxDrawdown.toFixed(2)}%`;

            // --- Update Chart ---
            const ctx = document.getElementById('challengeProgressChart')?.getContext('2d');
            if (ctx) {
                if (challengeChart) challengeChart.destroy();
                challengeChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        datasets: [{
                            data: [progress, 100 - progress],
                            backgroundColor: ['#00d4aa', 'var(--bg-tertiary)'],
                            borderWidth: 0,
                        }]
                    },
                    options: {
                        responsive: true,
                        cutout: '80%',
                        plugins: {
                            tooltip: { enabled: false },
                            legend: { display: false }
                        },
                        events: []
                    }
                });
            }
        };

        const renderTopTrades = () => {
            const widget = document.getElementById('top-trades-widget');
            if (!widget) return;

            const closedTrades = appState.trades.filter(t => t.exitPrice && t.exitDate && t.pnlAmount !== undefined);

            if (closedTrades.length === 0) {
                widget.innerHTML = `<p class="text-center py-4" style="color: var(--text-muted);">No trades yet.</p>`;
                return;
            }

            closedTrades.sort((a, b) => b.pnlAmount - a.pnlAmount);

            const topTrades = closedTrades.slice(0, 3);

            widget.innerHTML = topTrades.map(trade => {
                const pnlColor = trade.pnlAmount >= 0 ? 'text-green-500' : 'text-red-500';
                const exitDate = trade.exitDate.toDate();
                const formattedDate = exitDate.toLocaleDateString('en-GB', { day: '2-digit', month: 'short' });

                const pnlSign = trade.pnlAmount >= 0 ? '+' : '';

                return `
                    <div class="p-4 rounded-lg mb-2 last:mb-0" style="background-color: var(--bg-secondary); border: 1px solid var(--border-color);">
                        <div class="flex justify-between items-start">
                            <div>
                                <p class="font-bold text-md capitalize" style="color: var(--text-primary);">${trade.asset.toLowerCase()}</p>
                                <p class="text-xs capitalize" style="color: var(--text-muted);">${trade.direction.toLowerCase()} • ${formattedDate}</p>
                            </div>
                            <p class="font-bold text-md ${pnlColor}">${pnlSign}${formatCurrency(trade.pnlAmount)} (${trade.pnlPercent.toFixed(2)}%)</p>
                        </div>
                        <div class="flex justify-between items-end mt-2 text-xs">
                            <p style="color: var(--text-secondary);">Entry: ${formatCurrency(trade.entryPrice)}</p>
                            <p style="color: var(--text-secondary);">Exit: ${formatCurrency(trade.exitPrice)}</p>
                        </div>
                    </div>
                `;
            }).join('');
        };

        const renderChallengeHistory = () => {
            const container = document.getElementById('challenge-history-container');
            if (!container) return;

            if (appState.challengeHistory.length === 0) {
                container.innerHTML = `<div class="text-center p-8 rounded-lg" style="background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-muted);">No past challenges found.</div>`;
                return;
            }

            container.innerHTML = appState.challengeHistory.map(hist => {
                const isCompleted = hist.status === 'completed';
                const profitMade = hist.finalCapital - hist.startingCapital;

                return `
                <div class="p-6 rounded-lg shadow-sm" style="background-color: var(--bg-primary); border: 1px solid var(--border-color);">
                    <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                       <div>
                            <p class="text-xs" style="color: var(--text-muted);">${formatDate(hist.createdAt)} - ${formatDate(hist.completedAt)}</p>
                            <h4 class="text-lg font-bold" style="color: var(--text-primary);">Target: ${formatCurrency(hist.targetCapital)}</h4>
                       </div>
                       <div class="flex items-center gap-4">
                            <div>
                                <p class="text-sm font-semibold ${profitMade >= 0 ? 'text-green-500' : 'text-red-500'}">${formatCurrency(profitMade)}</p>
                                <p class="text-xs" style="color: var(--text-muted);">Net Profit</p>
                            </div>
                            <span class="text-sm font-semibold px-3 py-1 rounded-full ${isCompleted ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">${hist.status.charAt(0).toUpperCase() + hist.status.slice(1)}</span>
                       </div>
                    </div>
                </div>
                `;
            }).join('');
        };
        
        const renderAchievements = () => {
            const container = document.querySelector('.achievements-container');
            if (!container) return;

            if (appState.achievements.length === 0) {
                container.innerHTML = `<p class="col-span-full text-sm text-center py-4" style="color: var(--text-muted);">No achievements yet. Complete a challenge to earn one!</p>`;
                return;
            }

            const badgeSVGs = {
                'Bronze Trader': `<svg viewBox="0 0 36 36" fill="#cd7f32" role="img" aria-label="Bronze Medal"><path d="M18 6.2a1 1 0 00-1 1v2.3a1 1 0 002 0V7.2a1 1 0 00-1-1z"></path><path d="M11.5 12.3a1 1 0 00-1.4 1.4l1.6 1.6a1 1 0 001.4-1.4zM24.5 12.3a1 1 0 00-1.4-1.4l-1.6 1.6a1 1 0 101.4 1.4z"></path><path d="M18 30a12 12 0 1112-12 12 12 0 01-12 12zm0-22a10 10 0 1010 10A10 10 0 0018 8z"></path><path d="M18 28a10 10 0 1110-10 10 10 0 01-10 10zm0-18a8 8 0 108 8 8 8 0 00-8-8z"></path><path d="M4 11h4v2H4zM28 11h4v2h-4z"></path><path d="M18 25a7 7 0 117-7 7 7 0 01-7 7zm0-12a5 5 0 105 5 5 5 0 00-5-5z"></path></svg>`,
                'Silver Trader': `<svg viewBox="0 0 36 36" fill="#c0c0c0" role="img" aria-label="Silver Medal"><path d="M18 6.2a1 1 0 00-1 1v2.3a1 1 0 002 0V7.2a1 1 0 00-1-1z"></path><path d="M11.5 12.3a1 1 0 00-1.4 1.4l1.6 1.6a1 1 0 001.4-1.4zM24.5 12.3a1 1 0 00-1.4-1.4l-1.6 1.6a1 1 0 101.4 1.4z"></path><path d="M18 30a12 12 0 1112-12 12 12 0 01-12 12zm0-22a10 10 0 1010 10A10 10 0 0018 8z"></path><path d="M18 28a10 10 0 1110-10 10 10 0 01-10 10zm0-18a8 8 0 108 8 8 8 0 00-8-8z"></path><path d="M4 11h4v2H4zM28 11h4v2h-4z"></path><path d="M18 25a7 7 0 117-7 7 7 0 01-7 7zm0-12a5 5 0 105 5 5 5 0 00-5-5z"></path></svg>`,
                'Gold Trader': `<svg viewBox="0 0 36 36" fill="#ffd700" role="img" aria-label="Gold Medal"><path d="M18 6.2a1 1 0 00-1 1v2.3a1 1 0 002 0V7.2a1 1 0 00-1-1z"></path><path d="M11.5 12.3a1 1 0 00-1.4 1.4l1.6 1.6a1 1 0 001.4-1.4zM24.5 12.3a1 1 0 00-1.4-1.4l-1.6 1.6a1 1 0 101.4 1.4z"></path><path d="M18 30a12 12 0 1112-12 12 12 0 01-12 12zm0-22a10 10 0 1010 10A10 10 0 0018 8z"></path><path d="M18 28a10 10 0 1110-10 10 10 0 01-10 10zm0-18a8 8 0 108 8 8 8 0 00-8-8z"></path><path d="M4 11h4v2H4zM28 11h4v2h-4z"></path><path d="M18 25a7 7 0 117-7 7 7 0 01-7 7zm0-12a5 5 0 105 5 5 5 0 00-5-5z"></path></svg>`,
            };
            
            container.innerHTML = appState.achievements.map(ach => `
                <div class="flex flex-col items-center p-2 rounded-lg transition-transform transform hover:scale-105" style="background-color: var(--bg-tertiary);" title="${ach.badge} on ${formatDate(ach.awardedAt)}">
                    <div class="w-16 h-16">${badgeSVGs[ach.badge] || ''}</div>
                    <p class="text-xs font-semibold mt-2 truncate w-full" style="color: var(--text-primary);">${ach.badge}</p>
                </div>
            `).join('');
        };


        // --- CHART.JS ---
        let charts = {};
        const createChart = (ctx, config) => {
            if(!ctx) return;
            if (charts[ctx.canvas.id]) charts[ctx.canvas.id].destroy();
            charts[ctx.canvas.id] = new Chart(ctx, config);
        };
        const getChartColors = () => {
            const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
            const htmlStyles = getComputedStyle(document.documentElement);
            return {
                textColor: htmlStyles.getPropertyValue('--text-primary'),
                gridColor: isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)',
                tooltipBg: isDark ? htmlStyles.getPropertyValue('--bg-secondary') : htmlStyles.getPropertyValue('--bg-primary'),
                primary: '#3b82f6', 
                green: '#22c55e', 
                red: '#ef4444',
                chartRed: '#f87171',
                chartGreen: '#4ade80',
                teal: '#2dd4bf',
                orange: '#f97316',
                accent: htmlStyles.getPropertyValue('--accent-color').trim(),
            };
        };

        function renderAllCharts() {
            const colors = getChartColors();
            const { trades, ledger } = appState;
            const closedTrades = trades.filter(t => t.exitDate).sort((a,b) => a.exitDate.toDate() - b.exitDate.toDate());

            // --- Account Balance Chart ---
            const balanceCtx = document.getElementById('accountBalanceChart')?.getContext('2d');
            const timelineEvents = [];
            
            ledger.forEach(l => timelineEvents.push({ date: l.date.toDate(), type: l.type, amount: l.amount }));
            trades.forEach(t => {
                timelineEvents.push({ date: t.entryDate.toDate(), type: 'entry', amount: t.entryPrice * t.quantity });
                if (t.exitDate) {
                    const pnl = calculateNetPnl(t);
                    timelineEvents.push({ date: t.exitDate.toDate(), type: 'exit', amount: t.entryPrice * t.quantity, pnl: pnl });
                }
            });
            
            timelineEvents.sort((a,b) => a.date - b.date);
            
            let cash = 0;
            let deployedCapital = 0;
            const balanceLabels = ["Start"];
            const accountValueData = [0];
            const capitalDeployedData = [0];

            timelineEvents.forEach(event => {
                switch(event.type) {
                    case 'Deposit':
                        cash += event.amount;
                        break;
                    case 'Withdrawal':
                        cash -= event.amount;
                        break;
                    case 'entry':
                        cash -= event.amount;
                        deployedCapital += event.amount;
                        break;
                    case 'exit':
                        const exitValue = event.amount + event.pnl;
                        cash += exitValue;
                        deployedCapital -= event.amount;
                        break;
                }
                balanceLabels.push(formatDate(event.date));
                accountValueData.push(cash + deployedCapital);
                capitalDeployedData.push(deployedCapital);
            });

             createChart(balanceCtx, {
                type: 'line',
                data: {
                    labels: balanceLabels,
                    datasets: [{
                        label: 'Account Value',
                        data: accountValueData,
                        borderColor: colors.teal,
                        backgroundColor: 'rgba(45, 212, 191, 0.1)',
                        fill: false, tension: 0.1,
                    }, {
                        label: 'Capital Deployed',
                        data: capitalDeployedData,
                        borderColor: colors.orange,
                        backgroundColor: 'rgba(249, 115, 22, 0.1)',
                        fill: false, tension: 0.1,
                    }]
                },
                 options: { responsive: true, scales: { x: { ticks: { color: colors.textColor }, grid: { color: colors.gridColor } }, y: { ticks: { color: colors.textColor, callback: (value) => formatCurrency(value) }, grid: { color: colors.gridColor } } }, plugins: { legend: { labels: { color: colors.textColor } } } }
            });


            // --- Equity Curve Chart ---
            const equityCtx = document.getElementById('equityCurveChart')?.getContext('2d');
            let runningPnl = 0;
            const equityData = closedTrades.map(t => {
                const pnl = calculateNetPnl(t);
                runningPnl += pnl;
                return runningPnl;
            });

            createChart(equityCtx, {
                type: 'line',
                data: {
                    labels: closedTrades.map((_, i) => `Trade ${i + 1}`),
                    datasets: [{
                        label: 'Cumulative P&L',
                        data: [0, ...equityData],
                        borderColor: colors.primary,
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        fill: true, tension: 0.1, pointRadius: 2,
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                         x: { ticks: { color: colors.textColor, autoSkip: true, maxTicksLimit: 10 }, grid: { color: colors.gridColor } },
                         y: { ticks: { color: colors.textColor, callback: (value) => formatCurrency(value) }, grid: { color: colors.gridColor } }
                    },
                    plugins: { legend: { display: false } }
                }
            });

            // --- Monthly Performance Chart ---
            const monthlyCtx = document.getElementById('monthlyPerformanceChart')?.getContext('2d');
            const monthlyPnl = {};
            closedTrades.forEach(trade => {
                const pnl = calculateNetPnl(trade);
                const monthKey = trade.exitDate.toDate().toLocaleString('default', { month: 'short', year: '2-digit' });
                if(!monthlyPnl[monthKey]) monthlyPnl[monthKey] = 0;
                monthlyPnl[monthKey] += pnl;
            });
            createChart(monthlyCtx, {
                type: 'bar',
                data: {
                    labels: Object.keys(monthlyPnl),
                    datasets: [{
                        label: 'Monthly P&L',
                        data: Object.values(monthlyPnl),
                        backgroundColor: (context) => context.raw >= 0 ? colors.green : colors.red,
                        borderRadius: 4,
                    }]
                },
                options: {
                     responsive: true,
                     scales: {
                        x: { ticks: { color: colors.textColor }, grid: { display: false } },
                        y: { ticks: { color: colors.textColor, callback: (value) => formatCurrency(value) }, grid: { color: colors.gridColor } }
                    },
                    plugins: { legend: { display: false } }
                }
            });

             // --- P&L by Segment Chart ---
            const segmentCtx = document.getElementById('pnlBySegmentChart')?.getContext('2d');
            const pnlBySegment = {};
            closedTrades.forEach(trade => {
                const pnl = calculateNetPnl(trade);
                const segment = trade.segment || 'Other';
                if (!pnlBySegment[segment]) pnlBySegment[segment] = 0;
                pnlBySegment[segment] += pnl;
            });
             createChart(segmentCtx, {
                type: 'bar',
                data: {
                    labels: Object.keys(pnlBySegment),
                    datasets: [{
                        label: 'Net P&L',
                        data: Object.values(pnlBySegment),
                        backgroundColor: [colors.primary, colors.green, colors.red, colors.orange, colors.teal],
                    }]
                },
                options: { responsive: true, scales: { x: { ticks: { color: colors.textColor }, grid: { display: false } }, y: { ticks: { color: colors.textColor, callback: (value) => formatCurrency(value) }, grid: { color: colors.gridColor } } }, plugins: { legend: { display: false } } }
            });

            // --- Performance by Day of Week Chart ---
            const dayPerfCtx = document.getElementById('performanceByDayChart')?.getContext('2d');
            const pnlByDay = [0, 0, 0, 0, 0, 0, 0]; // Sun - Sat
            closedTrades.forEach(trade => {
                const pnl = calculateNetPnl(trade);
                const dayOfWeek = trade.exitDate.toDate().getDay();
                pnlByDay[dayOfWeek] += pnl;
            });
            createChart(dayPerfCtx, {
                type: 'bar',
                data: {
                    labels: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                    datasets: [{
                        label: 'P&L',
                        data: pnlByDay,
                        backgroundColor: (context) => context.raw >= 0 ? colors.chartGreen : colors.chartRed,
                    }]
                },
                options: { indexAxis: 'y', responsive: true, scales: { x: { ticks: { color: colors.textColor, callback: (value) => formatCurrency(value) }, grid: { color: colors.gridColor } }, y: { ticks: { color: colors.textColor }, grid: { display: false } } }, plugins: { legend: { display: false } } }
            });
            
            // --- Win/Loss Distribution Chart ---
            const winLossCtx = document.getElementById('winLossDistributionChart')?.getContext('2d');
            const winLossCanvas = document.getElementById('winLossDistributionChart');
            const winLossMessage = document.getElementById('winLossMessage');

            if(winLossCtx && winLossCanvas && winLossMessage) {
                 if (closedTrades.length === 0) {
                    winLossCanvas.classList.add('hidden');
                    winLossMessage.classList.remove('hidden');
                    if (charts['winLossDistributionChart']) {
                        charts['winLossDistributionChart'].destroy();
                        delete charts['winLossDistributionChart'];
                    }
                } else {
                    winLossCanvas.classList.remove('hidden');
                    winLossMessage.classList.add('hidden');

                    const wins = closedTrades.filter(t => calculateNetPnl(t) > 0).length;
                    const losses = closedTrades.length - wins;

                    createChart(winLossCtx, {
                        type: 'doughnut',
                        data: {
                            labels: ['Winning Trades', 'Losing Trades'],
                            datasets: [{
                                data: [wins, losses],
                                backgroundColor: [colors.green, colors.red],
                                borderColor: getComputedStyle(document.documentElement).getPropertyValue('--bg-primary').trim(),
                                borderWidth: 4,
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            cutout: '70%',
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        color: colors.textColor,
                                        boxWidth: 12,
                                        padding: 20
                                    }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            let label = context.label || '';
                                            if (label) { label += ': '; }
                                            if (context.raw !== null) {
                                                label += `${context.raw} trades`;
                                            }
                                            return label;
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
            }

            // --- Daily P&L Chart ---
            const dailyPnlCtx = document.getElementById('dailyPnlChart')?.getContext('2d');
            const dailyPnlCanvas = document.getElementById('dailyPnlChart');
            const dailyPnlMessage = document.getElementById('dailyPnlMessage');

            if(dailyPnlCtx && dailyPnlCanvas && dailyPnlMessage) {
                if (closedTrades.length === 0) {
                    dailyPnlCanvas.classList.add('hidden');
                    dailyPnlMessage.classList.remove('hidden');
                    if (charts['dailyPnlChart']) {
                        charts['dailyPnlChart'].destroy();
                        delete charts['dailyPnlChart'];
                    }
                } else {
                    dailyPnlCanvas.classList.remove('hidden');
                    dailyPnlMessage.classList.add('hidden');

                    const dailyPnl = {};
                    closedTrades.forEach(trade => {
                        const pnl = calculateNetPnl(trade);
                        const dateKey = trade.exitDate.toDate().toISOString().split('T')[0];
                        if (!dailyPnl[dateKey]) {
                            dailyPnl[dateKey] = 0;
                        }
                        dailyPnl[dateKey] += pnl;
                    });

                    const sortedDates = Object.keys(dailyPnl).sort();
                    const dailyPnlLabels = sortedDates.map(dateStr => {
                        const d = new Date(dateStr);
                        return d.toLocaleDateString('en-GB', { day: 'numeric', month: 'short' });
                    });
                    const dailyPnlData = sortedDates.map(date => dailyPnl[date]);

                    createChart(dailyPnlCtx, {
                        type: 'bar',
                        data: {
                            labels: dailyPnlLabels,
                            datasets: [{
                                label: 'Daily P&L',
                                data: dailyPnlData,
                                backgroundColor: (context) => context.raw >= 0 ? colors.green : colors.red,
                                borderRadius: 2
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                x: { ticks: { color: colors.textColor, autoSkip: true, maxTicksLimit: 20 }, grid: { display: false } },
                                y: { ticks: { color: colors.textColor, callback: (value) => formatCurrency(value) }, grid: { color: colors.gridColor } }
                            },
                            plugins: {
                                legend: { display: false },
                                tooltip: {
                                    callbacks: {
                                        title: function(context) {
                                            return `Date: ${context[0].label}`;
                                        },
                                        label: function(context) {
                                            let pnl = context.raw;
                                            return `P&L: ${formatCurrency(pnl)}`;
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
            }
            
            // --- ADDED: Daily Win Rate vs Avg Win Rate Chart ---
            const dailyWinRateCtx = document.getElementById('dailyWinRateChart')?.getContext('2d');
            if (dailyWinRateCtx && closedTrades.length > 0) {
                const dailyStats = {};
                closedTrades.forEach(trade => {
                    const pnl = calculateNetPnl(trade);
                    const dateKey = trade.exitDate.toDate().toISOString().split('T')[0];
                    if (!dailyStats[dateKey]) {
                        dailyStats[dateKey] = { wins: 0, total: 0 };
                    }
                    if (pnl > 0) {
                        dailyStats[dateKey].wins++;
                    }
                    dailyStats[dateKey].total++;
                });

                const sortedDates = Object.keys(dailyStats).sort();
                let cumulativeWins = 0;
                let cumulativeTrades = 0;

                const dailyWinRates = [];
                const avgWinRates = [];

                sortedDates.forEach(date => {
                    const stats = dailyStats[date];
                    
                    const dailyRate = (stats.wins / stats.total) * 100;
                    dailyWinRates.push(dailyRate);
                    
                    cumulativeWins += stats.wins;
                    cumulativeTrades += stats.total;
                    const avgRate = (cumulativeTrades > 0) ? (cumulativeWins / cumulativeTrades) * 100 : 0;
                    avgWinRates.push(avgRate);
                });

                createChart(dailyWinRateCtx, {
                    type: 'line',
                    data: {
                        labels: sortedDates,
                        datasets: [{
                            label: 'Daily Win Rate',
                            data: dailyWinRates,
                            borderColor: colors.primary,
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            tension: 0.2,
                        }, {
                            label: 'Average Win Rate',
                            data: avgWinRates,
                            borderColor: colors.green,
                            backgroundColor: 'rgba(34, 197, 94, 0.1)',
                            tension: 0.2,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: { 
                                ticks: { color: colors.textColor, autoSkip: true, maxTicksLimit: 15 }, 
                                grid: { color: colors.gridColor } 
                            },
                            y: { 
                                beginAtZero: true,
                                max: 100,
                                ticks: { 
                                    color: colors.textColor, 
                                    callback: (value) => value + '%'
                                }, 
                                grid: { color: colors.gridColor } 
                            }
                        },
                        plugins: {
                            legend: { labels: { color: colors.textColor } },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.dataset.label || '';
                                        if (label) { label += ': '; }
                                        if (context.parsed.y !== null) {
                                            label += context.parsed.y.toFixed(2) + '%';
                                        }
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
            }

            // --- Strategy vs P&L Chart ---
            const strategyCtx = document.getElementById('strategyPnlChart')?.getContext('2d');
            const pnlByStrategy = {};
            closedTrades.forEach(trade => {
                const pnl = calculateNetPnl(trade);
                const strategy = trade.strategy || 'Other';
                if (!pnlByStrategy[strategy]) pnlByStrategy[strategy] = 0;
                pnlByStrategy[strategy] += pnl;
            });
             createChart(strategyCtx, {
                type: 'bar',
                data: {
                    labels: Object.keys(pnlByStrategy),
                    datasets: [{
                        label: 'Net P&L',
                        data: Object.values(pnlByStrategy),
                        backgroundColor: (context) => context.raw >= 0 ? colors.accent : colors.red,
                        borderRadius: 6,
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { ticks: { color: colors.textColor }, grid: { display: false } },
                        y: { ticks: { color: colors.textColor, callback: (value) => formatCurrency(value) }, grid: { color: colors.gridColor } }
                    },
                    plugins: { legend: { display: false } }
                }
            });
        }
        
        // --- SCROLL TO TOP ---
        const scrollToTopBtn = document.getElementById('scroll-to-top-btn');
        if (mainContent && scrollToTopBtn) {
             mainContent.addEventListener('scroll', () => {
                if (mainContent.scrollTop > 300) {
                    scrollToTopBtn.classList.remove('hidden');
                } else {
                    scrollToTopBtn.classList.add('hidden');
                }
            });
            scrollToTopBtn.addEventListener('click', () => mainContent.scrollTo({ top: 0, behavior: 'smooth' }));
        }

        // --- INITIAL LOAD ---
        applyTheme();
        feather.replace();
    </script>
</body>
</html>













